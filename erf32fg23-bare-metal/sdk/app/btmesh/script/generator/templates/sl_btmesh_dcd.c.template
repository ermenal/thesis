/******************************************************************************
 *
 * @file   sl_btmesh_dcd.c
 * @brief  BLE Mesh Device Composition Data and memory configuration
 *
 *  Autogenerated file, do not edit
 *
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/
// *INDENT-OFF*

#ifdef __cplusplus
extern "C" {
#endif

#include <stddef.h>
#include <stdint.h>
#include "sl_btmesh_memory_config.h"
#include "sl_bluetooth_config.h"
#include "sl_btmesh_dcd.h"
#include "sl_btmesh_config.h"
#include "sl_btmesh.h"
#include "sl_btmesh_capi_types.h"

{%- macro u8tohex(val) %}
{{ "0x%02X"|format(val.__and__(255)) }}
{%- endmacro %}

{%- macro u16toa(val) %}
{{ "0x%02X, 0x%02X"|format(val.__and__(255), val.__rshift__(8)) }}
{%- endmacro %}

{%- macro u16tohex(val) %}
{{ "0x%04X"|format(val) }}
{%- endmacro %}

{%- macro model_vmid_hex(mdl) %}
  {% if mdl.is_sig_model() -%}
{{u16tohex(mdl.mid)}}
  {%- else -%}
{{u16tohex(mdl.cid)}}-{{u16tohex(mdl.mid)}}
  {%- endif %}
{%- endmacro %}

{%- macro model_type(mdl) %}
{% if mdl.is_sig_model() %}SIG{% else %}Vendor{% endif %}
{%- endmacro %}

{%- macro model_inst_info(mdl) %}
{{ mdl.name }} ({{ model_vmid_hex(mdl) }}) on {{mdl.elem.name}} ({{ mdl.elem_index }}) element
{%- endmacro %}

{%- macro model_item_header_info(mdl) %}
{% if mdl.model_item_format_short_supported %}
  {% set format = "0 (short)" %}
{% else %}
  {% set format = "1 (long)" %}
{% endif %}
Corresponding_Present = {{ mdl.corresponding_present | int }}, Format = {{ format }}, Extended_Items_Count = {{ mdl.extends_count }}
{%- endmacro %}

#define U16TOA(A) ((A) & 0xFF), ((A) >> 8)

const uint8_t __mesh_dcd[] = {
  U16TOA({{ u16tohex(dcd.cid) }}), /* Company ID */
  U16TOA({{ u16tohex(dcd.pid) }}), /* Product ID */
  U16TOA({{ u16tohex(dcd.vid) }}), /* Version Number */
  U16TOA(SL_BTMESH_CONFIG_RPL_SIZE), /* Capacity of Replay Protection List */
  U16TOA(SL_BTMESH_FEATURE_BITMASK), /* Features Bitmask */
{% for elem in dcd.elements %}
  /* {{ elem.name }} */
    U16TOA({{ u16tohex(elem.location) }}), /* Location */
    {{ u8tohex(elem.num_s) }}, /* Number of SIG Models = {{ elem.num_s }} */
    {{ u8tohex(elem.num_v) }}, /* Number of Vendor Models = {{ elem.num_v }} */
  {% if elem.num_s > 0 %}
    /* SIG Models */
    {% for mdl in elem.sig_models %}
      U16TOA({{ u16tohex(mdl.mid) }}), /* {{ mdl.name }} */
    {% endfor %}
  {% endif %}
  {% if elem.num_v > 0 %}
    /* Vendor Models */
    {% for mdl in elem.vendor_models %}
      U16TOA({{ u16tohex(mdl.cid) }}), U16TOA({{ u16tohex(mdl.mid) }}), /* {{ mdl.name }} */
    {% endfor %}
  {% endif %}
{% endfor %}
};

const size_t __mesh_dcd_len = sizeof(__mesh_dcd);
const uint8_t *__mesh_dcd_ptr = __mesh_dcd;

const uint8_t __mesh_dcd_page_1[] = {
{% for elem in dcd.elements %}

  /* Element: {{ elem.name }} ({{elem.elem_index}}) */
  {{ u8tohex(elem.num_s) }}, /* Number of SIG Models = {{ elem.num_s }} */
  {{ u8tohex(elem.num_v) }}, /* Number of Vendor Models = {{ elem.num_v }} */
  {% for mdl in elem.models %}

    /* {{ model_type(mdl) }} Model {{ mdl.mdl_index }}: {{ mdl.name }} ({{ model_vmid_hex(mdl) }}) */
    {{ u8tohex(mdl.model_item_header) }}, /* {{ model_item_header_info(mdl) }} */
    {% if mdl.corresponding_present %}
    {{ u8tohex(mdl.corresponding_group.id) }}, /* Corresponding_Group_ID: {{ mdl.corresponding_group.id }} */
      {% for cg_mdl in mdl.corresponding_group.mdl_insts | sort(attribute="vmid") %}
          /*  - {{ model_inst_info(cg_mdl) }} */
      {% endfor %}
    {% endif %}
    {% if mdl.extends_count > 0 %}
          /* Extended_Model_Items */
    {% endif %}
    {% for ext_mdl in mdl.extends  | sort(attribute="vmid") %}
      {% set ext_mdl_item = mdl.get_extended_model_item(ext_mdl) %}
      {% if mdl.model_item_format_short_supported %}
    {{ u8tohex(ext_mdl_item.model_item_short_bin) }}, /*  - {{ model_inst_info(ext_mdl) }} */
          /*    Element_Offset = {{ ext_mdl_item.elem_offset }}, Model_Item_Index = {{ ext_mdl_item.model_index }} */
      {% else %}
          /* - {{ model_inst_info(ext_mdl) }} */
    {{ u8tohex(ext_mdl_item.elem_offset_long_bin) }}, /*   Element_Offset = {{ ext_mdl_item.elem_offset }} */
    {{ u8tohex(ext_mdl_item.model_item_index_long_bin) }}, /*   Model_Item_Index = {{ ext_mdl_item.model_index }} */
      {% endif %}
    {% endfor %}
  {% endfor %}
{%- endfor %}
};

{% if profiles.profile_data|length > 0 %}
const uint8_t __mesh_dcd_page_2[] = {
{% for profile in profiles.profile_data %}
  /* {{ profile.name }} */
  U16TOA({{ u16tohex(profile.uuid) }}), /* Mesh profile ID */
  {{ u8tohex(profile.ver_maj) }},  /* Version Major */
  {{ u8tohex(profile.ver_min) }},  /* Version Minor */
  {{ u8tohex(profile.ver_z) }},  /* Version .Z */
  {{ u8tohex(profile.offsets|length) }},  /* Offset length */
    /* Offset list */
  {% for offset in profile.offsets %}
    {{ u8tohex(offset) }},
  {% endfor %}
  U16TOA({{ u16tohex(profile.additional_data|length) }}),  /* Additional data length */
    /* Additional data list */
  {% for data in profile.additional_data %}
    {{ u8tohex(offset) }},
  {% endfor %}

{% endfor %}
};
{% endif %}

const mesh_dcd_page_t __mesh_dcd_pages[] = {
    {
        /* DCD Page 1 */
        .page_number = 1,
        .size = sizeof(__mesh_dcd_page_1),
        .data = __mesh_dcd_page_1
    },
  {% if profiles.profile_data|length > 0 %}
    {
        /* DCD Page 2 */
        .page_number = 2,
        .size = sizeof(__mesh_dcd_page_2),
        .data = __mesh_dcd_page_2
    },
  {% endif %}
    {
        /* List terminator */
        .page_number = 0,
        .size = 0,
        .data = NULL
    }
};

const mesh_dcd_page_t *__mesh_dcd_pages_ptr = __mesh_dcd_pages;

const mesh_memory_config_t __mesh_memory_config = {
  .max_elements = SL_BTMESH_CONFIG_MAX_ELEMENTS,
  .max_models = SL_BTMESH_CONFIG_MAX_MODELS,
  .max_net_keys = SL_BTMESH_CONFIG_MAX_NETKEYS,
  .max_appkeys = SL_BTMESH_CONFIG_MAX_APPKEYS,
  .max_friendships = SL_BTMESH_CONFIG_MAX_FRIENDSHIPS,
  .max_app_binds = SL_BTMESH_CONFIG_MAX_APP_BINDS,
  .max_subscriptions = SL_BTMESH_CONFIG_MAX_SUBSCRIPTIONS,
  .max_foundation_model_commands = SL_BTMESH_CONFIG_MAX_FOUNDATION_CLIENT_CMDS,
  .net_cache_size = SL_BTMESH_CONFIG_NET_CACHE_SIZE,
  .replay_size = SL_BTMESH_CONFIG_RPL_SIZE,
  .max_send_segs = SL_BTMESH_CONFIG_MAX_SEND_SEGS,
  .max_recv_segs = SL_BTMESH_CONFIG_MAX_RECV_SEGS,
  .max_virtual_addresses = SL_BTMESH_CONFIG_MAX_VAS,
  .max_provision_sessions = SL_BTMESH_CONFIG_MAX_PROV_SESSIONS,
  .max_provision_bearers = SL_BTMESH_CONFIG_MAX_PROV_BEARERS,
  .max_gatt_connections = SL_BTMESH_CONFIG_MAX_GATT_CONNECTIONS,
  .gatt_txqueue_size = SL_BTMESH_CONFIG_GATT_TXQ_SIZE,
  .provisioner_max_ddb_entries = SL_BTMESH_CONFIG_MAX_PROVISIONED_DEVICES,
  .provisioner_max_node_net_keys = SL_BTMESH_CONFIG_MAX_PROVISIONED_DEVICE_NETKEYS,
  .provisioner_max_node_app_keys = SL_BTMESH_CONFIG_MAX_PROVISIONED_DEVICE_APPKEYS,
  .pstore_write_interval_elem_seq = (1 << (SL_BTMESH_CONFIG_SEQNUM_WRITE_INTERVAL_EXP)),
  .friend_max_total_cache = SL_BTMESH_CONFIG_FRIEND_MAX_TOTAL_CACHE,
  .friend_max_single_cache = SL_BTMESH_CONFIG_FRIEND_MAX_SINGLE_CACHE,
  .friend_max_subs_list = SL_BTMESH_CONFIG_FRIEND_MAX_SUBS_LIST,
  .app_send_max_queue = SL_BTMESH_CONFIG_APP_TXQ_SIZE,
  .its_key_cache = SL_BTMESH_CONFIG_ITS_KEY_CACHE_SIZE,
  .proxy_max_access_control_list_entries = SL_BTMESH_CONFIG_MAX_PROXY_ACCESS_CONTROL_LIST_ENTRIES,
  .limit_prov_concurrent_kr = SL_BTMESH_CONFIG_LIMIT_PROV_CONCURRENT_KR
};

#ifdef __cplusplus
}
#endif
// *INDENT-ON*
