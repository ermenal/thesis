/***************************************************************************//**
 * @file
 * @brief BLOB Transfer Server instances (autogenerated)
 *******************************************************************************
 * # License
 * <b>Copyright 2023 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

#ifndef SLI_BTMESH_BLOB_TRANSFER_SERVER_INSTANCES_H
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_INSTANCES_H

#include <stdint.h>
#include "sl_btmesh_api.h"
#include "sl_btmesh_dcd.h"

#ifdef SL_COMPONENT_CATALOG_PRESENT
#include "sl_component_catalog.h"
#endif // SL_COMPONENT_CATALOG_PRESENT

#include "sl_btmesh_blob_transfer_server_config.h"
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#include "sl_btmesh_blob_transfer_server_{{ inst | lower }}_config.h"
{% endfor %}
#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/***************************************************************************//**
 * @addtogroup mesh_blob_transfer_server BT Mesh BLOB Transfer Server
 * @{
 ******************************************************************************/

{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#if defined(SL_CATALOG_BTMESH_LPN_PRESENT) \
  && (SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_MODE_CFG_VAL) \
  && (SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_HIGH_THROUGHPUT_MODE_CFG_VAL)
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_HIGH_THROUGHPUT_MODE_ACTIVE   1
#else
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_HIGH_THROUGHPUT_MODE_ACTIVE   0
#endif

{% endfor -%}
#if {% for inst in btmesh_blob_transfer_server_instance | sort -%}
SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_HIGH_THROUGHPUT_MODE_ACTIVE{% if not loop.last %} \
 || {% endif %}{% endfor %}
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_LPN_HIGH_THROUGHPUT_MODE_ACTIVE   1
#else
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_LPN_HIGH_THROUGHPUT_MODE_ACTIVE   0
#endif

#define SLI_BTMESH_BLOB_TRANSFER_SERVER_COUNT   {{ btmesh_blob_transfer_server_instance | length }}

{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_INST_INDEX  {{ loop.index0 }}
{% endfor %}
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
{%- set full_inst_name = (("btmesh_blob_transfer_server", inst) | join("_") | upper) -%}
{%- set def_name = (("sl", full_inst_name, "elem_index") | join("_") | upper) -%}
{%- set def_value = ((full_inst_name, "group_main_elem_index") | join("_") | upper) -%}
{%- set def_name_cfg = (("sl", full_inst_name, "elem_index_cfg_val") | join("_") | upper) -%}
{%- set def_name_cfg_override = (("sl", full_inst_name, "elem_index_override_cfg_val") | join("_") | upper) -%}
#if {{def_name_cfg_override}}
{{ "#define {0: <52} {1}".format(def_name, def_name_cfg) }}
#else
{{ "#define {0: <52} {1}".format(def_name, def_value) }}
#endif

{% endfor -%}

typedef enum {
  /// The BLOB server is idle
  SLI_BTMESH_BLOB_TRANSFER_SERVER_IDLE,
  /// BLOB server is active
  SLI_BTMESH_BLOB_TRANSFER_SERVER_ACTIVE,
  /*************************************************************************//**
   * @addtogroup activesubstates Active Sub-states
   * @{
   ****************************************************************************/
  /// BLOBs are being erased
  SLI_BTMESH_BLOB_TRANSFER_SERVER_ACTIVE_ERASING,
  /// Invalid BLOBs are being erased
  SLI_BTMESH_BLOB_TRANSFER_SERVER_ACTIVE_ERASING_INVALID,
  /// Unmanaged BLOBs are being erased
  SLI_BTMESH_BLOB_TRANSFER_SERVER_ACTIVE_ERASING_UNMANAGED,
  /// Transfer is ongoing
  SLI_BTMESH_BLOB_TRANSFER_SERVER_ACTIVE_TRANSFER,
  /** @} end activesubstates */
  /*************************************************************************//**
   * @addtogroup idlesubstates Idle Sub-states
   * @{
   ****************************************************************************/
  /// The state machine is either initialized or the transfer is canceled
  SLI_BTMESH_BLOB_TRANSFER_SERVER_IDLE_INACTIVE,
  /// The transfer has been completed
  SLI_BTMESH_BLOB_TRANSFER_SERVER_IDLE_DONE
  /** @} end idlesubstates */
} sli_btmesh_blob_transfer_server_state_t;

/// BLOB Transfer Server instance configuration
typedef struct {
  #if SLI_BTMESH_BLOB_TRANSFER_SERVER_LPN_HIGH_THROUGHPUT_MODE_ACTIVE
  /// Handler for the LPN high throughput timer
  sl_btmesh_lpn_high_throughput_timer_t *high_throughput_timer;
  #else
  /// LPN high throughput timer is not used
  void *high_throughput_timer;
  #endif
  /// Pointer to statically allocated block buffer (link time)
  /// It is set to NULL if the block shall be allocated from heap.
  uint8_t *block_buffer;
  /// Size of block buffer
  /// It is set to 0 if the block shall be allocated from heap.
  uint32_t block_buffer_size;
  /// Element index of model instance (in DCD)
  uint16_t elem_index;
  /// The maximum number of chunks into which a block can be broken down
  uint16_t max_chunks_per_block;
  /// The maximum supported chunk size. Range: 8 - 241.
  uint16_t max_chunk_size;
  /// In Pull BLOB Transfer mode, how many chunks to request at a time.
  /// Can be set to zero if this transfer mode is not supported.
  uint16_t pull_mode_chunks_to_request;
  /// In Pull BLOB Transfer mode, retry requesting chunks with this interval
  /// in milliseconds. Can be set to zero if this transfer mode is not supported.
  uint16_t pull_mode_retry_interval_ms;
  /// In Pull BLOB Transfer mode, retry requesting chunks this many times before
  /// giving up. Can be set to zero if this transfer mode is not supported.
  /// @note If the timeout occurs before the retry attempts are exhausted,
  /// no more retries will be attempted.
  uint16_t pull_mode_retry_count;
  /// Poll delay in milliseconds on LPN when high throughput mode is active.
  /// The delay of first LPN poll when the BLOB Transfer Server expects messages
  /// from the client after an event.
  uint16_t lpn_poll_delay_ms;
  /// The minimum supported block size as an exponent n in 2^n. Range: 6 - 32
  uint8_t min_block_size_log;
  /// The maximum supported block size as an exponent n in 2^n.
  /// Must be less than or equal to (max_chunks_per_block * max_chunk_size).
  /// Range: 6 - 32
  uint8_t max_block_size_log;
  /// A bitfield of supported transfer modes. At least one must be supported.
  ///   - Bit 0: Push BLOB Transfer mode
  ///   - Bit 1: Pull BLOB Transfer mode
  uint8_t supported_transfer_modes;
} sli_btmesh_blob_transfer_server_config_t;

/// BLOB Transfer Server instance data
typedef struct {
  /// BLOB Transfer Server instance configuration
  const sli_btmesh_blob_transfer_server_config_t *config;
  /// ID of the BLOB being transferred
  sl_bt_uuid_64_t blob_id;
  /// Size of the BLOB being transferred
  uint32_t blob_size;
  /// Current progress of the current transfer in bytes
  uint32_t progress;
  /// Block size calculated based on the log value received at transfer start
  uint32_t blob_block_size;
  /// Buffer for blocks
  uint8_t *block_buffer;
  /// State of the current transfer
  union {
    struct {
      uint16_t idle : 1; ///< Idle state
      uint16_t inactive : 1; ///< Idle/Inactive state
      uint16_t done : 1; ///< Idle/Done state
      uint16_t active : 1; ///< Active state
      uint16_t suspended : 1; ///< Active/Suspended state
      uint16_t erasing : 1; ///< Active/Erasing state
      uint16_t erasing_invalid : 1; ///< Active/Erasing Invalid state
      uint16_t erasing_unmanaged : 1; ///< Active/Erasing Unmanaged state
      uint16_t transfer : 1; ///< Active/Transfer state
    };
    uint16_t raw; ///< raw data for quick access
  } state;
} sli_btmesh_blob_transfer_server_t;

sli_btmesh_blob_transfer_server_t *sli_btmesh_blob_transfer_server_get_by_inst_index(uint16_t inst_index);

sli_btmesh_blob_transfer_server_t *sli_btmesh_blob_transfer_server_get_by_elem_index(uint16_t elem_index);

/** @} end mesh_blob_transfer_server */

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // SLI_BTMESH_BLOB_TRANSFER_SERVER_INSTANCES_H
