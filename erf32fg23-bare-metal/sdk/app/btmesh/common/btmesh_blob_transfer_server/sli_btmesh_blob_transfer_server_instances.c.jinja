/***************************************************************************//**
 * @file
 * @brief BLOB Transfer Server instances (autogenerated)
 *******************************************************************************
 * # License
 * <b>Copyright 2023 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

#include <stddef.h>
#include "sl_status.h"

#ifdef SL_COMPONENT_CATALOG_PRESENT
#include "sl_component_catalog.h"
#endif // SL_COMPONENT_CATALOG_PRESENT

#ifdef SL_CATALOG_BTMESH_LPN_PRESENT
#include "sl_btmesh_lpn.h"
#endif // SL_CATALOG_BTMESH_LPN_PRESENT

#include "sli_btmesh_blob_transfer_server_instances.h"
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#include "sl_btmesh_blob_transfer_server_{{ inst | lower }}_config.h"
{% endfor %}

{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_STATIC         \
        ((SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_TYPE_CFG_VAL) \
        == (SL_BTMESH_BLOB_TRANSFER_SERVER_MEMORY_STATIC))
{% endfor %}
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#define SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_SIZE  \
        (1 << (SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_MAX_BLOCK_SIZE_LOG_CFG_VAL))
{% endfor %}
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#if SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_STATIC
static uint8_t blob_transfer_server_{{ inst | lower }}_block_buffer[SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_SIZE];
#endif
{% endfor %}
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
#if SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_HIGH_THROUGHPUT_MODE_ACTIVE
static sl_btmesh_lpn_high_throughput_timer_t blob_transfer_server_{{ inst | lower }}_high_throughput_timer;
#endif
{% endfor %}
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
const sli_btmesh_blob_transfer_server_config_t sli_btmesh_blob_transfer_server_{{ inst | lower }}_config = {
  #if SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_HIGH_THROUGHPUT_MODE_ACTIVE
  .high_throughput_timer = &blob_transfer_server_{{ inst | lower }}_high_throughput_timer,
  #else
  .high_throughput_timer = NULL,
  #endif
  #if SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_STATIC
  .block_buffer = &blob_transfer_server_{{ inst | lower }}_block_buffer,
  .block_buffer_size = SLI_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_BLOCK_BUFFER_SIZE,
  #else
  .block_buffer = NULL,
  .block_buffer_size = 0,
  #endif
  .elem_index = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_ELEM_INDEX,
  .max_chunks_per_block = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_MAX_CHUNKS_PER_BLOCK_CFG_VAL,
  .max_chunk_size = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_MAX_CHUNK_SIZE_CFG_VAL,
  .pull_mode_chunks_to_request = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_PULL_CHUNK_REQUEST_CNT_CFG_VAL,
  .pull_mode_retry_interval_ms = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_PULL_RETRY_INTERVAL_MS_CFG_VAL,
  .pull_mode_retry_count = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_PULL_RETRY_CNT_CFG_VAL,
  .lpn_poll_delay_ms = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_LPN_POLL_DELAY_MS_CFG_VAL,
  .min_block_size_log = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_MIN_BLOCK_SIZE_LOG_CFG_VAL,
  .max_block_size_log = SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_MAX_BLOCK_SIZE_LOG_CFG_VAL,
  .supported_transfer_modes = (SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_PUSH_MODE_CFG_VAL)
                            | (SL_BTMESH_BLOB_TRANSFER_SERVER_{{ inst | upper }}_PULL_MODE_CFG_VAL << 1)
};

{% endfor %}
{% for inst in btmesh_blob_transfer_server_instance | sort -%}
sli_btmesh_blob_transfer_server_t sli_btmesh_blob_transfer_server_{{ inst | lower }} = {
  .config = &sli_btmesh_blob_transfer_server_{{ inst | lower }}_config,
};

{% endfor %}
sli_btmesh_blob_transfer_server_t *const sli_btmesh_blob_transfer_server_instances[SLI_BTMESH_BLOB_TRANSFER_SERVER_COUNT] = {
{%- for inst in btmesh_blob_transfer_server_instance | sort %}
  &sli_btmesh_blob_transfer_server_{{ inst | lower }}{% if not loop.last %},{% endif %}
{%- endfor %}
};

sli_btmesh_blob_transfer_server_t *sli_btmesh_blob_transfer_server_get_by_inst_index(uint16_t inst_index)
{
  if (inst_index < SLI_BTMESH_BLOB_TRANSFER_SERVER_COUNT) {
    return sli_btmesh_blob_transfer_server_instances[inst_index];
  } else {
    return NULL;
  }
}

sli_btmesh_blob_transfer_server_t *sli_btmesh_blob_transfer_server_get_by_elem_index(uint16_t elem_index)
{
  for (uint16_t inst_idx = 0; inst_idx < SLI_BTMESH_BLOB_TRANSFER_SERVER_COUNT; inst_idx++) {
    if (sli_btmesh_blob_transfer_server_instances[inst_idx]->config->elem_index == elem_index) {
      return sli_btmesh_blob_transfer_server_instances[inst_idx];
    }
  }
  return NULL;
}