<?xml version="1.0" encoding="UTF-8"?>
<model part_family="unit_test_part" part_revision="ANY" calc_version="5.6.0" xsd_version="1.7.1" desc="PHY_Internal_868M_38p4kbps_long_preamble_static instance" processed="true" result_code="0" error_message="" timestamp="1984-01-02T12:34:56" target="IC">
    <phys>
        <phy name="PHY_Internal_868M_38p4kbps_long_preamble_static" readable_name="PHY Internal 868M 38p4kbps long preamble static" desc="PHY Internal 868M 38p4kbps long preamble static" group_name="Phys_internal" profile_name="Base" act_logic="" tags="" locked="true">
            <profile_inputs>
                <profile_input is_array="false">
                    <readable_name>Base Channel Frequency</readable_name>
                    <var_name>base_frequency_hz</var_name>
                    <category>operational_frequency</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Channel Spacing</readable_name>
                    <var_name>channel_spacing_hz</var_name>
                    <category>operational_frequency</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Crystal Frequency</readable_name>
                    <var_name>xtal_frequency_hz</var_name>
                    <category>crystal</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>RX Crystal Accuracy</readable_name>
                    <var_name>rx_xtal_error_ppm</var_name>
                    <category>crystal</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>TX Crystal Accuracy</readable_name>
                    <var_name>tx_xtal_error_ppm</var_name>
                    <category>crystal</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Sync Word 0</readable_name>
                    <var_name>syncword_0</var_name>
                    <category>syncword</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Sync Word 1</readable_name>
                    <var_name>syncword_1</var_name>
                    <category>syncword</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Sync Word TX Skip</readable_name>
                    <var_name>syncword_tx_skip</var_name>
                    <category>syncword</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Sync Word Length</readable_name>
                    <var_name>syncword_length</var_name>
                    <category>syncword</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Preamble Pattern Length</readable_name>
                    <var_name>preamble_pattern_len</var_name>
                    <category>preamble</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Preamble Length Total</readable_name>
                    <var_name>preamble_length</var_name>
                    <category>preamble</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Preamble Base Pattern</readable_name>
                    <var_name>preamble_pattern</var_name>
                    <category>preamble</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Modulation Type</readable_name>
                    <var_name>modulation_type</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Deviation</readable_name>
                    <var_name>deviation</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Bitrate</readable_name>
                    <var_name>bitrate</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Baudrate Tolerance</readable_name>
                    <var_name>baudrate_tol_ppm</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Shaping Filter</readable_name>
                    <var_name>shaping_filter</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>FSK symbol map</readable_name>
                    <var_name>fsk_symbol_map</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Shaping Filter Parameter (BT or R)</readable_name>
                    <var_name>shaping_filter_param</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Enable Asynchronous direct mode</readable_name>
                    <var_name>asynchronous_rx_enable</var_name>
                    <category>modem</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Differential Encoding Mode</readable_name>
                    <var_name>diff_encoding_mode</var_name>
                    <category>symbol_coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Symbol Encoding</readable_name>
                    <var_name>symbol_encoding</var_name>
                    <category>symbol_coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Manchester Code Mapping</readable_name>
                    <var_name>manchester_mapping</var_name>
                    <category>symbol_coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>DSSS Chipping Code Base</readable_name>
                    <var_name>dsss_chipping_code</var_name>
                    <category>symbol_coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>DSSS Chipping Code Length</readable_name>
                    <var_name>dsss_len</var_name>
                    <category>symbol_coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>DSSS Spreading Factor</readable_name>
                    <var_name>dsss_spreading_factor</var_name>
                    <category>symbol_coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Reconfigure for BER testing</readable_name>
                    <var_name>test_ber</var_name>
                    <category>testing</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Injection side</readable_name>
                    <var_name>lo_injection_side</var_name>
                    <category>operational_frequency</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Bit Endian</readable_name>
                    <var_name>frame_bitendian</var_name>
                    <category>frame_general</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Length Algorithm</readable_name>
                    <var_name>frame_length_type</var_name>
                    <category>frame_general</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Header Enable</readable_name>
                    <var_name>header_en</var_name>
                    <category>frame_general</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Coding Method</readable_name>
                    <var_name>frame_coding</var_name>
                    <category>frame_general</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Payload Whitening Enable</readable_name>
                    <var_name>payload_white_en</var_name>
                    <category>frame_payload</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Insert/Check CRC after payload</readable_name>
                    <var_name>payload_crc_en</var_name>
                    <category>frame_payload</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Header Size</readable_name>
                    <var_name>header_size</var_name>
                    <category>frame_header</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Header</readable_name>
                    <var_name>header_calc_crc</var_name>
                    <category>frame_header</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Whiten Header</readable_name>
                    <var_name>header_white_en</var_name>
                    <category>frame_header</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Fixed Payload Size</readable_name>
                    <var_name>fixed_length_size</var_name>
                    <category>frame_fixed_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Variable Length Bit Size</readable_name>
                    <var_name>var_length_numbits</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Variable Length Bit Endian</readable_name>
                    <var_name>var_length_bitendian</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Variable Length Byte Endian</readable_name>
                    <var_name>var_length_byteendian</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Variable Length Bit Location</readable_name>
                    <var_name>var_length_shift</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Minimum Length</readable_name>
                    <var_name>var_length_minlength</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Maximum Length</readable_name>
                    <var_name>var_length_maxlength</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Length Includes CRC Bytes</readable_name>
                    <var_name>var_length_includecrc</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Variable Frame Length Adjust</readable_name>
                    <var_name>var_length_adjust</var_name>
                    <category>frame_var_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type Location</readable_name>
                    <var_name>frame_type_loc</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Number of Frame Type Bits</readable_name>
                    <var_name>frame_type_bits</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type Bit 0 Location</readable_name>
                    <var_name>frame_type_lsbit</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 0 Length</readable_name>
                    <var_name>frame_type_0_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 1 Length</readable_name>
                    <var_name>frame_type_1_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 2 Length</readable_name>
                    <var_name>frame_type_2_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 3 Length</readable_name>
                    <var_name>frame_type_3_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 4 Length</readable_name>
                    <var_name>frame_type_4_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 5 Length</readable_name>
                    <var_name>frame_type_5_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 6 Length</readable_name>
                    <var_name>frame_type_6_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frame Type 7 Length</readable_name>
                    <var_name>frame_type_7_length</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 0</readable_name>
                    <var_name>frame_type_0_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 1</readable_name>
                    <var_name>frame_type_1_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 2</readable_name>
                    <var_name>frame_type_2_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 3</readable_name>
                    <var_name>frame_type_3_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 4</readable_name>
                    <var_name>frame_type_4_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 5</readable_name>
                    <var_name>frame_type_5_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 6</readable_name>
                    <var_name>frame_type_6_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Accept Frame Type 7</readable_name>
                    <var_name>frame_type_7_valid</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 0</readable_name>
                    <var_name>frame_type_0_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 1</readable_name>
                    <var_name>frame_type_1_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 2</readable_name>
                    <var_name>frame_type_2_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 3</readable_name>
                    <var_name>frame_type_3_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 4</readable_name>
                    <var_name>frame_type_4_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 5</readable_name>
                    <var_name>frame_type_5_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 6</readable_name>
                    <var_name>frame_type_6_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Apply Address Filter for Frame Type 7</readable_name>
                    <var_name>frame_type_7_filter</var_name>
                    <category>frame_type_length</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Polynomial</readable_name>
                    <var_name>crc_poly</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Seed</readable_name>
                    <var_name>crc_seed</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Byte Endian</readable_name>
                    <var_name>crc_byte_endian</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Output Bit Endian</readable_name>
                    <var_name>crc_bit_endian</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Input Padding</readable_name>
                    <var_name>crc_pad_input</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Input Bit Endian</readable_name>
                    <var_name>crc_input_order</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>CRC Invert</readable_name>
                    <var_name>crc_invert</var_name>
                    <category>crc</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Whitening Polynomial</readable_name>
                    <var_name>white_poly</var_name>
                    <category>whitening</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Whitening Seed</readable_name>
                    <var_name>white_seed</var_name>
                    <category>whitening</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Whitening Output Bit</readable_name>
                    <var_name>white_output_bit</var_name>
                    <category>whitening</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>FEC Algorithm</readable_name>
                    <var_name>fec_en</var_name>
                    <category>Channel_Coding</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Timing Detection Threshold</readable_name>
                    <var_name>timing_detection_threshold</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Timing Samples Threshold</readable_name>
                    <var_name>timing_sample_threshold</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frequency Offset Compensation (AFC) Limit</readable_name>
                    <var_name>freq_offset_hz</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Acquistion Channel Bandwidth</readable_name>
                    <var_name>bandwidth_hz</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>IF Frequency</readable_name>
                    <var_name>if_frequency_hz</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>PLL Bandwidth in TX mode</readable_name>
                    <var_name>pll_bandwidth_tx</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>PLL Bandwidth in RX mode</readable_name>
                    <var_name>pll_bandwidth_rx</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>PLL Miracle Mode</readable_name>
                    <var_name>pll_bandwidth_miracle_mode</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Number of Symbols in Timing Window</readable_name>
                    <var_name>symbols_in_timing_window</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Number of Errors Allowed in a Timing Window</readable_name>
                    <var_name>errors_in_timing_window</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Number of Timing Windows to Detect</readable_name>
                    <var_name>number_of_timing_windows</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Signal Quality Indicator Threshold</readable_name>
                    <var_name>sqi_threshold</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Timing Resync Period</readable_name>
                    <var_name>timing_resync_period</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frequency Offset Period</readable_name>
                    <var_name>frequency_offset_period</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frequency Offset Compensation (AFC) Period</readable_name>
                    <var_name>afc_period</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>AGC Power Target</readable_name>
                    <var_name>agc_power_target</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>RSSI Update Period</readable_name>
                    <var_name>rssi_period</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>AGC Hysteresis</readable_name>
                    <var_name>agc_hysteresis</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>AGC Settling Delay</readable_name>
                    <var_name>agc_settling_delay</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frequency Offset Compensation (AFC) Step Scale</readable_name>
                    <var_name>afc_step_scale</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>AGC Period</readable_name>
                    <var_name>agc_period</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>RX Baudrate offset</readable_name>
                    <var_name>rx_bitrate_offset_hz</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>AGC Speed</readable_name>
                    <var_name>agc_speed</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Frequency Compensation Mode</readable_name>
                    <var_name>frequency_comp_mode</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>OOK slicer level</readable_name>
                    <var_name>ook_slicer_level</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Include in 2FSK optimization scope</readable_name>
                    <var_name>in_2fsk_opt_scope</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Common RX/TX circuit</readable_name>
                    <var_name>ircal_rxtx_path_common</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>IR cal power level (amplitude)</readable_name>
                    <var_name>ircal_power_level</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>Byte position of dynamic length byte</readable_name>
                    <var_name>var_length_loc</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
                <profile_input is_array="false">
                    <readable_name>First word in frame contains (BITSPERWORD+1) bits. In most cases, set to 7.</readable_name>
                    <var_name>firstframe_bitsperword</var_name>
                    <category>Advanced</category>
                    <values/>
                </profile_input>
            </profile_inputs>
            <profile_outputs/>
        </phy>
    </phys>
    <profiles>
        <profile name="Base" readable_name="Base Profile" category="" desc="Profile used for most phy's on Jumbo" default="true" act_logic="">
            <inputs>
                <input is_array="false" input_type="REQUIRED" value_limit_min="100000000" value_limit_max="2480000000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="MEGA">
                    <readable_name>Base Channel Frequency</readable_name>
                    <category>operational_frequency</category>
                    <var_name>base_frequency_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="10000000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="KILO">
                    <readable_name>Channel Spacing</readable_name>
                    <category>operational_frequency</category>
                    <var_name>channel_spacing_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="38000000" value_limit_max="40000000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="MEGA">
                    <readable_name>Crystal Frequency</readable_name>
                    <category>crystal</category>
                    <var_name>xtal_frequency_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="200" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>RX Crystal Accuracy</readable_name>
                    <category>crystal</category>
                    <var_name>rx_xtal_error_ppm</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="200" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>TX Crystal Accuracy</readable_name>
                    <category>crystal</category>
                    <var_name>tx_xtal_error_ppm</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4294967295" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Sync Word 0</readable_name>
                    <category>syncword</category>
                    <var_name>syncword_0</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4294967295" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Sync Word 1</readable_name>
                    <category>syncword</category>
                    <var_name>syncword_1</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Sync Word TX Skip</readable_name>
                    <category>syncword</category>
                    <var_name>syncword_tx_skip</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="32" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Sync Word Length</readable_name>
                    <category>syncword</category>
                    <var_name>syncword_length</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Preamble Pattern Length</readable_name>
                    <category>preamble</category>
                    <var_name>preamble_pattern_len</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="2097151" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Preamble Length Total</readable_name>
                    <category>preamble</category>
                    <var_name>preamble_length</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="15" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Preamble Base Pattern</readable_name>
                    <category>preamble</category>
                    <var_name>preamble_pattern</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Modulation Type</readable_name>
                    <category>modem</category>
                    <var_name>modulation_type</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="1000000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="KILO">
                    <readable_name>Deviation</readable_name>
                    <category>modem</category>
                    <var_name>deviation</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="100" value_limit_max="2000000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="KILO">
                    <readable_name>Bitrate</readable_name>
                    <category>modem</category>
                    <var_name>bitrate</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="200000" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Baudrate Tolerance</readable_name>
                    <category>modem</category>
                    <var_name>baudrate_tol_ppm</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Shaping Filter</readable_name>
                    <category>modem</category>
                    <var_name>shaping_filter</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>FSK symbol map</readable_name>
                    <category>modem</category>
                    <var_name>fsk_symbol_map</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0.3" value_limit_max="1.5" fractional_digits="2" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Shaping Filter Parameter (BT or R)</readable_name>
                    <category>modem</category>
                    <var_name>shaping_filter_param</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Enable Asynchronous direct mode</readable_name>
                    <category>modem</category>
                    <var_name>asynchronous_rx_enable</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Differential Encoding Mode</readable_name>
                    <category>symbol_coding</category>
                    <var_name>diff_encoding_mode</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Symbol Encoding</readable_name>
                    <category>symbol_coding</category>
                    <var_name>symbol_encoding</var_name>
                    <var_values>
                        <value>SymbolEncodingEnum.NRZ</value>
                    </var_values>
                    <defaults>
                        <value>SymbolEncodingEnum.NRZ</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Manchester Code Mapping</readable_name>
                    <category>symbol_coding</category>
                    <var_name>manchester_mapping</var_name>
                    <var_values>
                        <value>ManchesterMappingEnum.Default</value>
                    </var_values>
                    <defaults>
                        <value>ManchesterMappingEnum.Default</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4294967295" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>DSSS Chipping Code Base</readable_name>
                    <category>symbol_coding</category>
                    <var_name>dsss_chipping_code</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="32" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>DSSS Chipping Code Length</readable_name>
                    <category>symbol_coding</category>
                    <var_name>dsss_len</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="100" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>DSSS Spreading Factor</readable_name>
                    <category>symbol_coding</category>
                    <var_name>dsss_spreading_factor</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Reconfigure for BER testing</readable_name>
                    <category>testing</category>
                    <var_name>test_ber</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Injection side</readable_name>
                    <category>operational_frequency</category>
                    <var_name>lo_injection_side</var_name>
                    <var_values>
                        <value>LoInjectionSideEnum.HIGH_SIDE</value>
                    </var_values>
                    <defaults>
                        <value>LoInjectionSideEnum.HIGH_SIDE</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Bit Endian</readable_name>
                    <category>frame_general</category>
                    <var_name>frame_bitendian</var_name>
                    <var_values>
                        <value>bitEndian.LSB_FIRST</value>
                    </var_values>
                    <defaults>
                        <value>bitEndian.LSB_FIRST</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Length Algorithm</readable_name>
                    <category>frame_general</category>
                    <var_name>frame_length_type</var_name>
                    <var_values>
                        <value>FrameLengthEnum.FIXED_LENGTH</value>
                    </var_values>
                    <defaults>
                        <value>FrameLengthEnum.FIXED_LENGTH</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Header Enable</readable_name>
                    <category>frame_general</category>
                    <var_name>header_en</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Coding Method</readable_name>
                    <category>frame_general</category>
                    <var_name>frame_coding</var_name>
                    <var_values>
                        <value>FrameCodingEnum.NONE</value>
                    </var_values>
                    <defaults>
                        <value>FrameCodingEnum.NONE</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Payload Whitening Enable</readable_name>
                    <category>frame_payload</category>
                    <var_name>payload_white_en</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Insert/Check CRC after payload</readable_name>
                    <category>frame_payload</category>
                    <var_name>payload_crc_en</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="1" value_limit_max="254" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Header Size</readable_name>
                    <category>frame_header</category>
                    <var_name>header_size</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <defaults>
                        <value>1</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Header</readable_name>
                    <category>frame_header</category>
                    <var_name>header_calc_crc</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Whiten Header</readable_name>
                    <category>frame_header</category>
                    <var_name>header_white_en</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="1" value_limit_max="2147483647" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Fixed Payload Size</readable_name>
                    <category>frame_fixed_length</category>
                    <var_name>fixed_length_size</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <defaults>
                        <value>1</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="12" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Variable Length Bit Size</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_numbits</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Variable Length Bit Endian</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_bitendian</var_name>
                    <var_values>
                        <value>VarLengthBitEndian.LSB_FIRST</value>
                    </var_values>
                    <defaults>
                        <value>VarLengthBitEndian.LSB_FIRST</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Variable Length Byte Endian</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_byteendian</var_name>
                    <var_values>
                        <value>VarLengthByteEndian.LSB_FIRST</value>
                    </var_values>
                    <defaults>
                        <value>VarLengthByteEndian.LSB_FIRST</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="7" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Variable Length Bit Location</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_shift</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4095" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Minimum Length</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_minlength</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4095" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Maximum Length</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_maxlength</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Length Includes CRC Bytes</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_includecrc</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="-4096" value_limit_max="4095" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Variable Frame Length Adjust</readable_name>
                    <category>frame_var_length</category>
                    <var_name>var_length_adjust</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="255" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type Location</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_loc</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="1" value_limit_max="3" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Number of Frame Type Bits</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_bits</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <defaults>
                        <value>3</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="7" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type Bit 0 Location</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_lsbit</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 0 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_0_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 1 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_1_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 2 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_2_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 3 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_3_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 4 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_4_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 5 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_5_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 6 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_6_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frame Type 7 Length</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_7_length</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <defaults>
                        <value>16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 0</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_0_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 1</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_1_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 2</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_2_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 3</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_3_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 4</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_4_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 5</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_5_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 6</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_6_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Accept Frame Type 7</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_7_valid</var_name>
                    <var_values>
                        <value>True</value>
                    </var_values>
                    <defaults>
                        <value>True</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 0</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_0_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 1</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_1_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 2</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_2_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 3</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_3_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 4</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_4_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 5</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_5_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 6</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_6_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Apply Address Filter for Frame Type 7</readable_name>
                    <category>frame_type_length</category>
                    <var_name>frame_type_7_filter</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Polynomial</readable_name>
                    <category>crc</category>
                    <var_name>crc_poly</var_name>
                    <var_values>
                        <value>CrcPolyEnum.CRC_16</value>
                    </var_values>
                    <defaults>
                        <value>CrcPolyEnum.CRC_16</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="4294967295" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Seed</readable_name>
                    <category>crc</category>
                    <var_name>crc_seed</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Byte Endian</readable_name>
                    <category>crc</category>
                    <var_name>crc_byte_endian</var_name>
                    <var_values>
                        <value>CrcByteEndian.MSB_FIRST</value>
                    </var_values>
                    <defaults>
                        <value>CrcByteEndian.MSB_FIRST</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Output Bit Endian</readable_name>
                    <category>crc</category>
                    <var_name>crc_bit_endian</var_name>
                    <var_values>
                        <value>CrcBitEndian.MSB_FIRST</value>
                    </var_values>
                    <defaults>
                        <value>CrcBitEndian.MSB_FIRST</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Input Padding</readable_name>
                    <category>crc</category>
                    <var_name>crc_pad_input</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Input Bit Endian</readable_name>
                    <category>crc</category>
                    <var_name>crc_input_order</var_name>
                    <var_values>
                        <value>CrcInputOrderEnum.LSB_FIRST</value>
                    </var_values>
                    <defaults>
                        <value>CrcInputOrderEnum.LSB_FIRST</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>CRC Invert</readable_name>
                    <category>crc</category>
                    <var_name>crc_invert</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <defaults>
                        <value>False</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Whitening Polynomial</readable_name>
                    <category>whitening</category>
                    <var_name>white_poly</var_name>
                    <var_values>
                        <value>WhitePolyEnum.NONE</value>
                    </var_values>
                    <defaults>
                        <value>WhitePolyEnum.NONE</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="65535" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Whitening Seed</readable_name>
                    <category>whitening</category>
                    <var_name>white_seed</var_name>
                    <var_values>
                        <value>65535</value>
                    </var_values>
                    <defaults>
                        <value>65535</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" value_limit_min="0" value_limit_max="15" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Whitening Output Bit</readable_name>
                    <category>whitening</category>
                    <var_name>white_output_bit</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <defaults>
                        <value>0</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="REQUIRED" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>FEC Algorithm</readable_name>
                    <category>Channel_Coding</category>
                    <var_name>fec_en</var_name>
                    <var_values>
                        <value>FECEnum.NONE</value>
                    </var_values>
                    <defaults>
                        <value>FECEnum.NONE</value>
                    </defaults>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="255" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Timing Detection Threshold</readable_name>
                    <category>Advanced</category>
                    <var_name>timing_detection_threshold</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="100" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Timing Samples Threshold</readable_name>
                    <category>Advanced</category>
                    <var_name>timing_sample_threshold</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="500000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="KILO">
                    <readable_name>Frequency Offset Compensation (AFC) Limit</readable_name>
                    <category>Advanced</category>
                    <var_name>freq_offset_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="100" value_limit_max="2530000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="KILO">
                    <readable_name>Acquistion Channel Bandwidth</readable_name>
                    <category>Advanced</category>
                    <var_name>bandwidth_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="70000" value_limit_max="1900000" deprecated="false" default_visiblity="VISIBLE" units_multiplier="KILO">
                    <readable_name>IF Frequency</readable_name>
                    <category>Advanced</category>
                    <var_name>if_frequency_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>PLL Bandwidth in TX mode</readable_name>
                    <category>Advanced</category>
                    <var_name>pll_bandwidth_tx</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>PLL Bandwidth in RX mode</readable_name>
                    <category>Advanced</category>
                    <var_name>pll_bandwidth_rx</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="OPTIONAL" deprecated="false" default_visiblity="HIDDEN">
                    <readable_name>PLL Miracle Mode</readable_name>
                    <category>Advanced</category>
                    <var_name>pll_bandwidth_miracle_mode</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="60" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Number of Symbols in Timing Window</readable_name>
                    <category>Advanced</category>
                    <var_name>symbols_in_timing_window</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="4" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Number of Errors Allowed in a Timing Window</readable_name>
                    <category>Advanced</category>
                    <var_name>errors_in_timing_window</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="1" value_limit_max="16" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Number of Timing Windows to Detect</readable_name>
                    <category>Advanced</category>
                    <var_name>number_of_timing_windows</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="255" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Signal Quality Indicator Threshold</readable_name>
                    <category>Advanced</category>
                    <var_name>sqi_threshold</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="15" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Timing Resync Period</readable_name>
                    <category>Advanced</category>
                    <var_name>timing_resync_period</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="7" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frequency Offset Period</readable_name>
                    <category>Advanced</category>
                    <var_name>frequency_offset_period</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="7" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frequency Offset Compensation (AFC) Period</readable_name>
                    <category>Advanced</category>
                    <var_name>afc_period</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="-40" value_limit_max="8" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>AGC Power Target</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_power_target</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="1" value_limit_max="15" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>RSSI Update Period</readable_name>
                    <category>Advanced</category>
                    <var_name>rssi_period</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="8" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>AGC Hysteresis</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_hysteresis</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="63" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>AGC Settling Delay</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_settling_delay</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0.0" value_limit_max="2.0" fractional_digits="2" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frequency Offset Compensation (AFC) Step Scale</readable_name>
                    <category>Advanced</category>
                    <var_name>afc_step_scale</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="7" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>AGC Period</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_period</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="200000" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>RX Baudrate offset</readable_name>
                    <category>Advanced</category>
                    <var_name>rx_bitrate_offset_hz</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>AGC Speed</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_speed</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Frequency Compensation Mode</readable_name>
                    <category>Advanced</category>
                    <var_name>frequency_comp_mode</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="1" value_limit_max="10" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>OOK slicer level</readable_name>
                    <category>Advanced</category>
                    <var_name>ook_slicer_level</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="OPTIONAL" deprecated="false" default_visiblity="HIDDEN">
                    <readable_name>Include in 2FSK optimization scope</readable_name>
                    <category>Advanced</category>
                    <var_name>in_2fsk_opt_scope</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Common RX/TX circuit</readable_name>
                    <category>Advanced</category>
                    <var_name>ircal_rxtx_path_common</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="255" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>IR cal power level (amplitude)</readable_name>
                    <category>Advanced</category>
                    <var_name>ircal_power_level</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="4096" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>Byte position of dynamic length byte</readable_name>
                    <category>Advanced</category>
                    <var_name>var_length_loc</var_name>
                    <var_values/>
                    <defaults/>
                </input>
                <input is_array="false" input_type="LINKED_IO" value_limit_min="0" value_limit_max="7" deprecated="false" default_visiblity="VISIBLE">
                    <readable_name>First word in frame contains (BITSPERWORD+1) bits. In most cases, set to 7.</readable_name>
                    <category>Advanced</category>
                    <var_name>firstframe_bitsperword</var_name>
                    <var_values/>
                    <defaults/>
                </input>
            </inputs>
            <forces/>
            <outputs>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="255">
                    <readable_name>Timing Detection Threshold</readable_name>
                    <category>Advanced</category>
                    <var_name>timing_detection_threshold</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="100">
                    <readable_name>Timing Samples Threshold</readable_name>
                    <category>Advanced</category>
                    <var_name>timing_sample_threshold</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="500000">
                    <readable_name>Frequency Offset Compensation (AFC) Limit</readable_name>
                    <category>Advanced</category>
                    <var_name>freq_offset_hz</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="100" value_limit_max="2530000">
                    <readable_name>Acquistion Channel Bandwidth</readable_name>
                    <category>Advanced</category>
                    <var_name>bandwidth_hz</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="70000" value_limit_max="1900000">
                    <readable_name>IF Frequency</readable_name>
                    <category>Advanced</category>
                    <var_name>if_frequency_hz</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO">
                    <readable_name>PLL Bandwidth in TX mode</readable_name>
                    <category>Advanced</category>
                    <var_name>pll_bandwidth_tx</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO">
                    <readable_name>PLL Bandwidth in RX mode</readable_name>
                    <category>Advanced</category>
                    <var_name>pll_bandwidth_rx</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="60">
                    <readable_name>Number of Symbols in Timing Window</readable_name>
                    <category>Advanced</category>
                    <var_name>symbols_in_timing_window</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="4">
                    <readable_name>Number of Errors Allowed in a Timing Window</readable_name>
                    <category>Advanced</category>
                    <var_name>errors_in_timing_window</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="1" value_limit_max="16">
                    <readable_name>Number of Timing Windows to Detect</readable_name>
                    <category>Advanced</category>
                    <var_name>number_of_timing_windows</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="255">
                    <readable_name>Signal Quality Indicator Threshold</readable_name>
                    <category>Advanced</category>
                    <var_name>sqi_threshold</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="15">
                    <readable_name>Timing Resync Period</readable_name>
                    <category>Advanced</category>
                    <var_name>timing_resync_period</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="7">
                    <readable_name>Frequency Offset Period</readable_name>
                    <category>Advanced</category>
                    <var_name>frequency_offset_period</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="7">
                    <readable_name>Frequency Offset Compensation (AFC) Period</readable_name>
                    <category>Advanced</category>
                    <var_name>afc_period</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="-40" value_limit_max="8">
                    <readable_name>AGC Power Target</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_power_target</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="1" value_limit_max="15">
                    <readable_name>RSSI Update Period</readable_name>
                    <category>Advanced</category>
                    <var_name>rssi_period</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="8">
                    <readable_name>AGC Hysteresis</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_hysteresis</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="63">
                    <readable_name>AGC Settling Delay</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_settling_delay</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0.0" value_limit_max="2.0">
                    <readable_name>Frequency Offset Compensation (AFC) Step Scale</readable_name>
                    <category>Advanced</category>
                    <var_name>afc_step_scale</var_name>
                    <var_values>
                        <value>1.0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="7">
                    <readable_name>AGC Period</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_period</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="200000">
                    <readable_name>RX Baudrate offset</readable_name>
                    <category>Advanced</category>
                    <var_name>rx_bitrate_offset_hz</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO">
                    <readable_name>AGC Speed</readable_name>
                    <category>Advanced</category>
                    <var_name>agc_speed</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO">
                    <readable_name>Frequency Compensation Mode</readable_name>
                    <category>Advanced</category>
                    <var_name>frequency_comp_mode</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="1" value_limit_max="10">
                    <readable_name>OOK slicer level</readable_name>
                    <category>Advanced</category>
                    <var_name>ook_slicer_level</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO">
                    <readable_name>Common RX/TX circuit</readable_name>
                    <category>Advanced</category>
                    <var_name>ircal_rxtx_path_common</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="255">
                    <readable_name>IR cal power level (amplitude)</readable_name>
                    <category>Advanced</category>
                    <var_name>ircal_power_level</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="4096">
                    <readable_name>Byte position of dynamic length byte</readable_name>
                    <category>Advanced</category>
                    <var_name>var_length_loc</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="LINKED_IO" value_limit_min="0" value_limit_max="7">
                    <readable_name>First word in frame contains (BITSPERWORD+1) bits. In most cases, set to 7.</readable_name>
                    <category>Advanced</category>
                    <var_name>firstframe_bitsperword</var_name>
                    <var_values>
                        <value>7</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Preamble Binary Pattern</readable_name>
                    <category></category>
                    <var_name>preamble_string</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Sync Word Binary Pattern</readable_name>
                    <category></category>
                    <var_name>syncword_string</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Actual Bandwidth</readable_name>
                    <category></category>
                    <var_name>bandwidth_actual</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Desired baudrate</readable_name>
                    <category></category>
                    <var_name>baudrate</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Actual sample frequency</readable_name>
                    <category></category>
                    <var_name>sample_freq_actual</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Antenna diversity mode</readable_name>
                    <category></category>
                    <var_name>div_antdivmode</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>Disable repeated measurement of first antenna when Select-Best algorithm is used</readable_name>
                    <category></category>
                    <var_name>div_antdivrepeatdis</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>Convolutional Decoder Buffer Size</readable_name>
                    <category></category>
                    <var_name>frc_conv_decoder_buffer_size</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="INFO">
                    <readable_name>FEC enabled flag</readable_name>
                    <category></category>
                    <var_name>fec_enabled</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>Frequency Offset Factor</readable_name>
                    <category></category>
                    <var_name>frequency_offset_factor</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>Frequency Offset Factor FXP</readable_name>
                    <category></category>
                    <var_name>frequency_offset_factor_fxp</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>Dynamic Slicer Feature Enabled</readable_name>
                    <category></category>
                    <var_name>dynamic_slicer_enabled</var_name>
                    <var_values>
                        <value>False</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="true" output_type="RAIL_CONFIG">
                    <readable_name>Dynamic Slicer Threshold Values</readable_name>
                    <category></category>
                    <var_name>dynamic_slicer_threshold_values</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="true" output_type="RAIL_CONFIG">
                    <readable_name>Dynamic Slicer Level Values</readable_name>
                    <category></category>
                    <var_name>dynamic_slicer_level_values</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>SRC1 Helper Calculation</readable_name>
                    <category></category>
                    <var_name>src1_calcDenominator</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>SRC2 Helper Calculation</readable_name>
                    <category></category>
                    <var_name>src2_calcDenominator</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>TX Baud Rate</readable_name>
                    <category></category>
                    <var_name>tx_baud_rate_actual</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>Number of baud to transmit 1 symbol</readable_name>
                    <category></category>
                    <var_name>baud_per_symbol_actual</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>Number of bits contained in 1 symbol</readable_name>
                    <category></category>
                    <var_name>bits_per_symbol_actual</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>For receive scanning PHYs: order of PHY in scanning sequence</readable_name>
                    <category></category>
                    <var_name>rx_ch_hopping_order_num</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>For receive scanning PHYs: event to trigger a hop to next PHY</readable_name>
                    <category></category>
                    <var_name>rx_ch_hopping_mode</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="RAIL_CONFIG">
                    <readable_name>For receive scanning PHYs: delay in microseconds to look for RX on a particular PHY</readable_name>
                    <category></category>
                    <var_name>rx_ch_hopping_delay_usec</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_BLOCKWHITEMODE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FECCTRL_BLOCKWHITEMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CTRL_BITSPERWORD</readable_name>
                    <category>frame</category>
                    <var_name>FRC_CTRL_BITSPERWORD</var_name>
                    <var_values>
                        <value>7</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CTRL_RXFCDMODE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_CTRL_RXFCDMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CTRL_TXFCDMODE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_CTRL_TXFCDMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CTRL_BITORDER</readable_name>
                    <category>frame</category>
                    <var_name>FRC_CTRL_BITORDER</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CTRL_UARTMODE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_CTRL_UARTMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WCNTCMP0_FRAMELENGTH</readable_name>
                    <category>frame</category>
                    <var_name>FRC_WCNTCMP0_FRAMELENGTH</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WCNTCMP1_LENGTHFIELDLOC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_WCNTCMP1_LENGTHFIELDLOC</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_DFLINCLUDECRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_DFLINCLUDECRC</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_MINLENGTH</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_MINLENGTH</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_DFLBITS</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_DFLBITS</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_DFLOFFSET</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_DFLOFFSET</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_DFLSHIFT</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_DFLSHIFT</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_DFLBITORDER</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_DFLBITORDER</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_DFLCTRL_DFLMODE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_DFLCTRL_DFLMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_MAXLENGTH_MAXLENGTH</readable_name>
                    <category>frame</category>
                    <var_name>FRC_MAXLENGTH_MAXLENGTH</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD0_SKIPWHITE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD0_SKIPWHITE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD0_SKIPCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD0_SKIPCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD0_CALCCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD0_CALCCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD0_INCLUDECRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD0_INCLUDECRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD0_BUFFER</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD0_BUFFER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD0_WORDS</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD0_WORDS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD1_SKIPWHITE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD1_SKIPWHITE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD1_SKIPCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD1_SKIPCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD1_CALCCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD1_CALCCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD1_INCLUDECRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD1_INCLUDECRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD1_BUFFER</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD1_BUFFER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD1_WORDS</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD1_WORDS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD2_SKIPWHITE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD2_SKIPWHITE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD2_SKIPCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD2_SKIPCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD2_CALCCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD2_CALCCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD2_INCLUDECRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD2_INCLUDECRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD2_BUFFER</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD2_BUFFER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD2_WORDS</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD2_WORDS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD3_SKIPWHITE</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD3_SKIPWHITE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD3_SKIPCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD3_SKIPCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD3_CALCCRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD3_CALCCRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD3_INCLUDECRC</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD3_INCLUDECRC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD3_BUFFER</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD3_BUFFER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FCD3_WORDS</readable_name>
                    <category>frame</category>
                    <var_name>FRC_FCD3_WORDS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="true" output_type="SW_VAR">
                    <readable_name>Packed Frame Coding Array</readable_name>
                    <category></category>
                    <var_name>frame_coding_array_packed</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_PADCRCINPUT</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_PADCRCINPUT</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_BITSPERWORD</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_BITSPERWORD</var_name>
                    <var_values>
                        <value>7</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_BITREVERSE</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_BITREVERSE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_BYTEREVERSE</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_BYTEREVERSE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_INPUTBITORDER</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_INPUTBITORDER</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_CRCWIDTH</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_CRCWIDTH</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_CTRL_OUTPUTINV</readable_name>
                    <category>crc</category>
                    <var_name>CRC_CTRL_OUTPUTINV</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_INIT_INIT</readable_name>
                    <category>crc</category>
                    <var_name>CRC_INIT_INIT</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>CRC_POLY_POLY</readable_name>
                    <category>crc</category>
                    <var_name>CRC_POLY_POLY</var_name>
                    <var_values>
                        <value>40961</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WHITECTRL_SHROUTPUTSEL</readable_name>
                    <category>whitening</category>
                    <var_name>FRC_WHITECTRL_SHROUTPUTSEL</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WHITECTRL_XORFEEDBACK</readable_name>
                    <category>whitening</category>
                    <var_name>FRC_WHITECTRL_XORFEEDBACK</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WHITECTRL_FEEDBACKSEL</readable_name>
                    <category>whitening</category>
                    <var_name>FRC_WHITECTRL_FEEDBACKSEL</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WHITEPOLY_POLY</readable_name>
                    <category>whitening</category>
                    <var_name>FRC_WHITEPOLY_POLY</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_WHITEINIT_WHITEINIT</readable_name>
                    <category>whitening</category>
                    <var_name>FRC_WHITEINIT_WHITEINIT</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVMODE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVDECODEMODE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVDECODEMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVTRACEBACKDISABLE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVTRACEBACKDISABLE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVINV</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVINV</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_INTERLEAVEMODE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_INTERLEAVEMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_INTERLEAVEFIRSTINDEX</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_INTERLEAVEFIRSTINDEX</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_INTERLEAVEWIDTH</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_INTERLEAVEWIDTH</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVBUSLOCK</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVBUSLOCK</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVSUBFRAMETERMINATE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVSUBFRAMETERMINATE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_SINGLEBLOCK</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_SINGLEBLOCK</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_FORCE2FSK</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_FORCE2FSK</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_FECCTRL_CONVHARDERROR</readable_name>
                    <category>fec</category>
                    <var_name>FRC_FECCTRL_CONVHARDERROR</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_TRAILTXDATACTRL_TRAILTXDATA</readable_name>
                    <category>fec</category>
                    <var_name>FRC_TRAILTXDATACTRL_TRAILTXDATA</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_TRAILTXDATACTRL_TRAILTXDATACNT</readable_name>
                    <category>fec</category>
                    <var_name>FRC_TRAILTXDATACTRL_TRAILTXDATACNT</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_TRAILTXDATACTRL_TRAILTXDATAFORCE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_TRAILTXDATACTRL_TRAILTXDATAFORCE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CONVGENERATOR_GENERATOR0</readable_name>
                    <category>fec</category>
                    <var_name>FRC_CONVGENERATOR_GENERATOR0</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CONVGENERATOR_GENERATOR1</readable_name>
                    <category>fec</category>
                    <var_name>FRC_CONVGENERATOR_GENERATOR1</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CONVGENERATOR_RECURSIVE</readable_name>
                    <category>fec</category>
                    <var_name>FRC_CONVGENERATOR_RECURSIVE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_CONVGENERATOR_NONSYSTEMATIC</readable_name>
                    <category>fec</category>
                    <var_name>FRC_CONVGENERATOR_NONSYSTEMATIC</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_PUNCTCTRL_PUNCT0</readable_name>
                    <category>fec</category>
                    <var_name>FRC_PUNCTCTRL_PUNCT0</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>FRC_PUNCTCTRL_PUNCT1</readable_name>
                    <category>fec</category>
                    <var_name>FRC_PUNCTCTRL_PUNCT1</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CF.CFOSR</readable_name>
                    <category></category>
                    <var_name>MODEM_CF_CFOSR</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CF.DEC0</readable_name>
                    <category></category>
                    <var_name>MODEM_CF_DEC0</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CF.DEC1</readable_name>
                    <category></category>
                    <var_name>MODEM_CF_DEC1</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CF.DEC1GAIN</readable_name>
                    <category></category>
                    <var_name>MODEM_CF_DEC1GAIN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CF.DEC2</readable_name>
                    <category></category>
                    <var_name>MODEM_CF_DEC2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.CODING</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_CODING</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.DIFFENCMODE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_DIFFENCMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.DSSSDOUBLE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_DSSSDOUBLE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.DSSSLEN</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_DSSSLEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.DSSSSHIFTS</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_DSSSSHIFTS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.FDM0DIFFDIS</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_FDM0DIFFDIS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.FRAMEDETDEL</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_FRAMEDETDEL</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.MAPFSK</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_MAPFSK</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.MODFORMAT</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_MODFORMAT</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL0.SHAPING</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL0_SHAPING</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.COMPMODE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_COMPMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.DUALSYNC</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_DUALSYNC</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.FREQOFFESTLIM</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_FREQOFFESTLIM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.FREQOFFESTPER</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_FREQOFFESTPER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.PHASEDEMOD</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_PHASEDEMOD</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.RESYNCPER</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_RESYNCPER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.SYNC1INV</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_SYNC1INV</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.SYNCBITS</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_SYNCBITS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.SYNCERRORS</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_SYNCERRORS</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL1.SYNCDATA</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL1_SYNCDATA</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL2.BRDIVA</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL2_BRDIVA</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL2.BRDIVB</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL2_BRDIVB</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL2.DATAFILTER</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL2_DATAFILTER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL2.DEVWEIGHTDIS</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL2_DEVWEIGHTDIS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL2.SQITHRESH</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL2_SQITHRESH</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL3.TSAMPDEL</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL3_TSAMPDEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL3.TSAMPLIM</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL3_TSAMPLIM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL3.TSAMPMODE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL3_TSAMPMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL4.ADCSATLEVEL</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL4_ADCSATDENS</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL4.ADCSATLEVEL</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL4_ADCSATLEVEL</var_name>
                    <var_values>
                        <value>6</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL4.DEVOFFCOMP</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL4_DEVOFFCOMP</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL4.ISICOMP</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL4_ISICOMP</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL4.OFFSETPHASEMASKING</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL4_OFFSETPHASEMASKING</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL5.BRCALAVG</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL5_BRCALAVG</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL5.BRCALEN</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL5_BRCALEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL5.BRCALMODE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL5_BRCALMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL5.DETDEL</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL5_DETDEL</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL5.TDEDGE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL5_TDEDGE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.CTRL5.TREDGE</readable_name>
                    <category></category>
                    <var_name>MODEM_CTRL5_TREDGE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.MODINDEX.FREQGAINE</readable_name>
                    <category></category>
                    <var_name>MODEM_MODINDEX_FREQGAINE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.MODINDEX.FREQGAINM</readable_name>
                    <category></category>
                    <var_name>MODEM_MODINDEX_FREQGAINM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.MODINDEX.MODINDEXE</readable_name>
                    <category></category>
                    <var_name>MODEM_MODINDEX_MODINDEXE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.MODINDEX.MODINDEXM</readable_name>
                    <category></category>
                    <var_name>MODEM_MODINDEX_MODINDEXM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.PRE.BASE</readable_name>
                    <category></category>
                    <var_name>MODEM_PRE_BASE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.PRE.BASEBITS</readable_name>
                    <category></category>
                    <var_name>MODEM_PRE_BASEBITS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.PRE.DSSSPRE</readable_name>
                    <category></category>
                    <var_name>MODEM_PRE_DSSSPRE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.PRE.PREERRORS</readable_name>
                    <category></category>
                    <var_name>MODEM_PRE_PREERRORS</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.PRE.TXBASES</readable_name>
                    <category></category>
                    <var_name>MODEM_PRE_TXBASES</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.RXBR.RXBRDEN</readable_name>
                    <category></category>
                    <var_name>MODEM_RXBR_RXBRDEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.RXBR.RXBRINT</readable_name>
                    <category></category>
                    <var_name>MODEM_RXBR_RXBRINT</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.RXBR.RXBRNUM</readable_name>
                    <category></category>
                    <var_name>MODEM_RXBR_RXBRNUM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING0.COEFF0</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING0_COEFF0</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING0.COEFF1</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING0_COEFF1</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING0.COEFF2</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING0_COEFF2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING0.COEFF3</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING0_COEFF3</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING1.COEFF4</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING1_COEFF4</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING1.COEFF5</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING1_COEFF5</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING1.COEFF6</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING1_COEFF6</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING1.COEFF7</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING1_COEFF7</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SHAPING2.COEFF8</readable_name>
                    <category></category>
                    <var_name>MODEM_SHAPING2_COEFF8</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SYNC0.SYNC0</readable_name>
                    <category></category>
                    <var_name>MODEM_SYNC0_SYNC0</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.SYNC1.SYNC1</readable_name>
                    <category></category>
                    <var_name>MODEM_SYNC1_SYNC1</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.ADDTIMSEQ</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_ADDTIMSEQ</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.FASTRESYNC</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_FASTRESYNC</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.FDM0THRESH</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_FDM0THRESH</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.OFFSUBDEN</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_OFFSUBDEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.OFFSUBNUM</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_OFFSUBNUM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.TIMINGBASES</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_TIMINGBASES</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.TIMSEQSYNC</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_TIMSEQSYNC</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.TIMTHRESH</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_TIMTHRESH</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TIMING.TSAGCDEL</readable_name>
                    <category></category>
                    <var_name>MODEM_TIMING_TSAGCDEL</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TXBR.TXBRDEN</readable_name>
                    <category></category>
                    <var_name>MODEM_TXBR_TXBRDEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.TXBR.TXBRNUM</readable_name>
                    <category></category>
                    <var_name>MODEM_TXBR_TXBRNUM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.DSSS0.DSSS0</readable_name>
                    <category></category>
                    <var_name>MODEM_DSSS0_DSSS0</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFCADJLIM.AFCADJLIM</readable_name>
                    <category></category>
                    <var_name>MODEM_AFCADJLIM_AFCADJLIM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCAVGPER</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCAVGPER</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCDEL</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCDEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCRXCLR</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCRXCLR</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCRXMODE</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCRXMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCSCALEE</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCSCALEE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCSCALEM</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCSCALEM</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.AFC.AFCTXMODE</readable_name>
                    <category></category>
                    <var_name>MODEM_AFC_AFCTXMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.MIXCTRL.MODE</readable_name>
                    <category></category>
                    <var_name>MODEM_MIXCTRL_MODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>MODEM.MIXCTRL.DIGIQSWAPEN</readable_name>
                    <category></category>
                    <var_name>MODEM_MIXCTRL_DIGIQSWAPEN</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.REALMODE</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_REALMODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.VLDOCLKGEN</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_VLDOCLKGEN</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.VLDOCLKGEN</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_REGENCLKDELAY</var_name>
                    <var_values>
                        <value>4</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.INPUTSCALE</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_INPUTSCALE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.OTA1CURRENT</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_OTA1CURRENT</var_name>
                    <var_values>
                        <value>2</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.OTA2CURRENT</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_OTA2CURRENT</var_name>
                    <var_values>
                        <value>2</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.OTA3CURRENT</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_OTA3CURRENT</var_name>
                    <var_values>
                        <value>2</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.VCM</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_VCM</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.VLDOSERIES</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_VLDOSERIES</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.VLDOSERIESCURR</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_VLDOSERIESCURR</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.VLDOSHUNT</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_VLDOSHUNT</var_name>
                    <var_values>
                        <value>2</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFADCCTRL.INVERTCLK</readable_name>
                    <category></category>
                    <var_name>RAC_IFADCCTRL_INVERTCLK</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFFILTCTRL.VCM</readable_name>
                    <category></category>
                    <var_name>RAC_IFFILTCTRL_VCM</var_name>
                    <var_values>
                        <value>2</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFFILTCTRL.VREG</readable_name>
                    <category></category>
                    <var_name>RAC_IFFILTCTRL_VREG</var_name>
                    <var_values>
                        <value>4</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFFILTCTRL.BANDWIDTH</readable_name>
                    <category></category>
                    <var_name>RAC_IFFILTCTRL_BANDWIDTH</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFFILTCTRL.CENTFREQ</readable_name>
                    <category></category>
                    <var_name>RAC_IFFILTCTRL_CENTFREQ</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SEQ_REG_FIELD">
                    <readable_name>SEQ.SYNTHLPFCTRLTX.SYNTHLPFCTRLTX</readable_name>
                    <category></category>
                    <var_name>SEQ_SYNTHLPFCTRLTX_SYNTHLPFCTRLTX</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SEQ_REG_FIELD">
                    <readable_name>SEQ.SYNTHLPFCTRLRX.SYNTHLPFCTRLRX</readable_name>
                    <category></category>
                    <var_name>SEQ_SYNTHLPFCTRLRX_SYNTHLPFCTRLRX</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.VLDO</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_VLDO</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.BANDSEL</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_BANDSEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.CASCBIAS</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_CASCBIAS</var_name>
                    <var_values>
                        <value>7</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.TRIMVCASLDO</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_TRIMVCASLDO</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.TRIMVCM</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_TRIMVCM</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.TRIMVREFLDO</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_TRIMVREFLDO</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.TRIMVREGMIN</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_TRIMVREGMIN</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.ENHYST</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_ENHYST</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.IFPGACTRL.ENOFFD</readable_name>
                    <category></category>
                    <var_name>RAC_IFPGACTRL_ENOFFD</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.RFENCTRL.DEMEN</readable_name>
                    <category></category>
                    <var_name>RAC_RFENCTRL_DEMEN</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.RFENCTRL.IFADCCAPRESET</readable_name>
                    <category></category>
                    <var_name>RAC_RFENCTRL_IFADCCAPRESET</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CALOFFSET.CALOFFSET</readable_name>
                    <category></category>
                    <var_name>SYNTH_CALOFFSET_CALOFFSET</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CHCTRL.CHNO</readable_name>
                    <category></category>
                    <var_name>SYNTH_CHCTRL_CHNO</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CHSP.CHSP</readable_name>
                    <category></category>
                    <var_name>SYNTH_CHSP_CHSP</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.DIVCTRL.LODIVFREQCTRL</readable_name>
                    <category></category>
                    <var_name>SYNTH_DIVCTRL_LODIVFREQCTRL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.FREQ.FREQ</readable_name>
                    <category></category>
                    <var_name>SYNTH_FREQ_FREQ</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.IFFREQ.IFFREQ</readable_name>
                    <category></category>
                    <var_name>SYNTH_IFFREQ_IFFREQ</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.IFFREQ.LOSIDE</readable_name>
                    <category></category>
                    <var_name>SYNTH_IFFREQ_LOSIDE</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL0.ADCRESETDURATION</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL0_ADCRESETDURATION</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL0.RSSISHIFT</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL0_RSSISHIFT</var_name>
                    <var_values>
                        <value>78</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL0.PWRTARGET</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL0_PWRTARGET</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL0.MODE</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL0_MODE</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL1.AGCPERIOD</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL1_AGCPERIOD</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL1.RSSIPERIOD</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL1_RSSIPERIOD</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL1.SUBPERIOD</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL1_SUBPERIOD</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL1.SUBINT</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL1_SUBINT</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL1.SUBNUM</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL1_SUBNUM</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL1.SUBDEN</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL1_SUBDEN</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL2.ADCRSTSTARTUP</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL2_ADCRSTSTARTUP</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL2.MAXPWRVAR</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL2_MAXPWRVAR</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL2.HYST</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL2_HYST</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL2.FASTLOOPDEL</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL2_FASTLOOPDEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.CTRL2.CFLOOPDEL</readable_name>
                    <category></category>
                    <var_name>AGC_CTRL2_CFLOOPDEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAINSTEPLIM.CFLOOPSTEPMAX</readable_name>
                    <category></category>
                    <var_name>AGC_GAINSTEPLIM_CFLOOPSTEPMAX</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAINSTEPLIM.FASTSTEPUP</readable_name>
                    <category></category>
                    <var_name>AGC_GAINSTEPLIM_FASTSTEPUP</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAINSTEPLIM.FASTSTEPDOWN</readable_name>
                    <category></category>
                    <var_name>AGC_GAINSTEPLIM_FASTSTEPDOWN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.LOOPDEL.LNASLICESDEL</readable_name>
                    <category></category>
                    <var_name>AGC_LOOPDEL_LNASLICESDEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.LOOPDEL.IFPGADEL</readable_name>
                    <category></category>
                    <var_name>AGC_LOOPDEL_IFPGADEL</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.LOOPDEL.PKDWAIT</readable_name>
                    <category></category>
                    <var_name>AGC_LOOPDEL_PKDWAIT</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAINRANGE.MAXGAIN</readable_name>
                    <category></category>
                    <var_name>AGC_GAINRANGE_MAXGAIN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAINRANGE.MINGAIN</readable_name>
                    <category></category>
                    <var_name>AGC_GAINRANGE_MINGAIN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAININDEX.MININDEXDEGEN</readable_name>
                    <category></category>
                    <var_name>AGC_GAININDEX_MININDEXDEGEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAININDEX.MININDEXPGA</readable_name>
                    <category></category>
                    <var_name>AGC_GAININDEX_MININDEXPGA</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAININDEX.NUMINDEXATTEN</readable_name>
                    <category></category>
                    <var_name>AGC_GAININDEX_NUMINDEXATTEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAININDEX.NUMINDEXSLICES</readable_name>
                    <category></category>
                    <var_name>AGC_GAININDEX_NUMINDEXSLICES</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAININDEX.NUMINDEXDEGEN</readable_name>
                    <category></category>
                    <var_name>AGC_GAININDEX_NUMINDEXDEGEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.GAININDEX.NUMINDEXPGA</readable_name>
                    <category></category>
                    <var_name>AGC_GAININDEX_NUMINDEXPGA</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MININDEX.INDEXMINPGA</readable_name>
                    <category></category>
                    <var_name>AGC_MININDEX_INDEXMINPGA</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MININDEX.INDEXMINDEGEN</readable_name>
                    <category></category>
                    <var_name>AGC_MININDEX_INDEXMINDEGEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MININDEX.INDEXMINSLICES</readable_name>
                    <category></category>
                    <var_name>AGC_MININDEX_INDEXMINSLICES</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MININDEX.INDEXMINATTEN</readable_name>
                    <category></category>
                    <var_name>AGC_MININDEX_INDEXMINATTEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MANGAIN.MANGAININDEX</readable_name>
                    <category></category>
                    <var_name>AGC_MANGAIN_MANGAININDEX</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MANGAIN.MANGAININDEXEN</readable_name>
                    <category></category>
                    <var_name>AGC_MANGAIN_MANGAININDEXEN</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MANGAIN.MANGAINLNAATTEN</readable_name>
                    <category></category>
                    <var_name>AGC_MANGAIN_MANGAINLNAATTEN</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MANGAIN.MANGAINLNASLICES</readable_name>
                    <category></category>
                    <var_name>AGC_MANGAIN_MANGAINLNASLICES</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>AGC.MANGAIN.MANGAINLNASLICESREG</readable_name>
                    <category></category>
                    <var_name>AGC_MANGAIN_MANGAINLNASLICESREG</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.TRIMAUXPLLCLK</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_TRIMAUXPLLCLK</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.TRIMTRSWGATEV</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_TRIMTRSWGATEV</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.TRIMVCASLDO</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_TRIMVCASLDO</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.TRIMVREFLDO</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_TRIMVREFLDO</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.TRIMVREGMIN</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_TRIMVREGMIN</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.TRIMAUXBIAS</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_TRIMAUXBIAS</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.LNAMIXCTRL1.ENBIASCAL</readable_name>
                    <category></category>
                    <var_name>RAC_LNAMIXCTRL1_ENBIASCAL</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCOAMPLITUDE</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCOAMPLITUDE</var_name>
                    <var_values>
                        <value>10</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCODETAMPLITUDE</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCODETAMPLITUDE</var_name>
                    <var_values>
                        <value>7</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCODETEN</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCODETEN</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCODETMODE</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCODETMODE</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCOAREGCURR</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCOAREGCURR</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCOCREGCURR</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCOCREGCURR</var_name>
                    <var_values>
                        <value>2</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>RAC.VCOCTRL.VCODIVCURR</readable_name>
                    <category></category>
                    <var_name>RAC_VCOCTRL_VCODIVCURR</var_name>
                    <var_values>
                        <value>15</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.DITHERDSMOUTPUT</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_DITHERDSMOUTPUT</var_name>
                    <var_values>
                        <value>7</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.DITHERDAC</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_DITHERDAC</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.DITHERDSMINPUT</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_DITHERDSMINPUT</var_name>
                    <var_values>
                        <value>1</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.DSMMODE</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_DSMMODE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.LSBFORCE</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_LSBFORCE</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.LOCKTHRESHOLD</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_LOCKTHRESHOLD</var_name>
                    <var_values>
                        <value>3</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.AUXLOCKTHRESHOLD</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_AUXLOCKTHRESHOLD</var_name>
                    <var_values>
                        <value>5</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.PRSMUX0</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_PRSMUX0</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SVD_REG_FIELD">
                    <readable_name>SYNTH.CTRL.PRSMUX1</readable_name>
                    <category></category>
                    <var_name>SYNTH_CTRL_PRSMUX1</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SEQ_REG_FIELD">
                    <readable_name>SEQ.MISC.SQBMODETX</readable_name>
                    <category></category>
                    <var_name>SEQ_MISC_SQBMODETX</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SEQ_REG_FIELD">
                    <readable_name>SEQ.MISC.DYNAMIC_SLICER_SW_EN</readable_name>
                    <category></category>
                    <var_name>SEQ_MISC_DYNAMIC_SLICER_SW_EN</var_name>
                    <var_values>
                        <value>0</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL auxndiv</readable_name>
                    <category></category>
                    <var_name>ircal_auxndiv</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL auxlodiv</readable_name>
                    <category></category>
                    <var_name>ircal_auxlodiv</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL rampval</readable_name>
                    <category></category>
                    <var_name>ircal_rampval</var_name>
                    <var_values>
                        <value>6</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL rxamppll</readable_name>
                    <category></category>
                    <var_name>ircal_rxamppll</var_name>
                    <var_values>
                        <value>4</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL rxamppa</readable_name>
                    <category></category>
                    <var_name>ircal_rxamppa</var_name>
                    <var_values>
                        <value>16</value>
                    </var_values>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL manufconfigvalid</readable_name>
                    <category></category>
                    <var_name>ircal_manufconfigvalid</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL pllconfigvalid</readable_name>
                    <category></category>
                    <var_name>ircal_pllconfigvalid</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL paconfigvalid</readable_name>
                    <category></category>
                    <var_name>ircal_paconfigvalid</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL useswrssiaveraging</readable_name>
                    <category></category>
                    <var_name>ircal_useswrssiaveraging</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL numrssitoavg</readable_name>
                    <category></category>
                    <var_name>ircal_numrssitoavg</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL throwawaybeforerssi</readable_name>
                    <category></category>
                    <var_name>ircal_throwawaybeforerssi</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL delayusbeforerssi</readable_name>
                    <category></category>
                    <var_name>ircal_delayusbeforerssi</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL delayusbetweenswrssi</readable_name>
                    <category></category>
                    <var_name>ircal_delayusbetweenswrssi</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL bestconfig</readable_name>
                    <category></category>
                    <var_name>ircal_bestconfig</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL agcrssiperiod</readable_name>
                    <category></category>
                    <var_name>ircal_agcrssiperiod</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL useswrssiaveraging new</readable_name>
                    <category></category>
                    <var_name>ircal_useswrssiaveraging2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL numrssitoavg new</readable_name>
                    <category></category>
                    <var_name>ircal_numrssitoavg2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL throwawaybeforerssi new</readable_name>
                    <category></category>
                    <var_name>ircal_throwawaybeforerssi2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL delayusbeforerssi new</readable_name>
                    <category></category>
                    <var_name>ircal_delayusbeforerssi2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
                <output is_array="false" output_type="SW_VAR">
                    <readable_name>IRCAL delayusbetweenswrssi new</readable_name>
                    <category></category>
                    <var_name>ircal_delayusbetweenswrssi2</var_name>
                    <var_values/>
                    <var_overrides/>
                </output>
            </outputs>
            <default_phys/>
        </profile>
    </profiles>
    <variables>
        <variable name="family" type="string" is_array="false" format="ascii" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_modem_sync_bits" type="int" is_array="false" format="decimal" desc="The modem control sync bits." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_modindex" type="float" is_array="false" format="float" desc="The mod index." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_complex" type="complex" is_array="false" format="complex" desc="An unit_test_part complex variable." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_long" type="int" is_array="false" format="hex" desc="An unit_test_part long variable." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_bool" type="bool" is_array="false" format="ascii" desc="An unit_test_part bool variable." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_str" type="string" is_array="false" format="ascii" desc="An unit_test_part string variable." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dummy_modem_cf_oversampling" type="enum" is_array="false" format="decimal" desc="The center frequency oversampling" forceable="true" value_do_not_care="false">
            <enum name="ModemCenterFreqOverSample" desc="An example description of the overall enum.">
                <members>
                    <member name="CF7" value="0" desc=""/>
                    <member name="CF8" value="1" desc=""/>
                    <member name="CF12" value="2" desc=""/>
                    <member name="CF16" value="3" desc=""/>
                    <member name="CF32" value="4" desc=""/>
                    <member name="CF0" value="5" desc=""/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="agcperiod_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2.0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agcperiod_actual()</name>
            </access_write>
        </variable>
        <variable name="rssi_period_sym_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated>
                    <value>8</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_rssi_period_actual()</name>
            </access_write>
        </variable>
        <variable name="agc_settling_delay" type="int" is_array="false" format="decimal" desc="Delay between two AGC gain adjustments in AGC clock cycles" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_cfloopdel_reg()</name>
                <name>CALC_AGC.calc_cfloopdel_reg()</name>
                <name>CALC_AGC.calc_cfloopdel_reg()</name>
                <name>CALC_AGC.calc_cfloopdel_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="agc_clock_cycle" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_fastloopdel_reg()</name>
                <name>CALC_AGC.calc_ifpgadel_reg()</name>
                <name>CALC_AGC.calc_lnaslicesdel_reg()</name>
                <name>CALC_AGC.calc_fastloopdel_reg()</name>
                <name>CALC_AGC.calc_ifpgadel_reg()</name>
                <name>CALC_AGC.calc_lnaslicesdel_reg()</name>
                <name>CALC_AGC.calc_fastloopdel_reg()</name>
                <name>CALC_AGC.calc_ifpgadel_reg()</name>
                <name>CALC_AGC.calc_lnaslicesdel_reg()</name>
                <name>CALC_AGC.calc_fastloopdel_reg()</name>
                <name>CALC_AGC.calc_ifpgadel_reg()</name>
                <name>CALC_AGC.calc_lnaslicesdel_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="agc_speed" type="enum" is_array="false" format="decimal" desc="AGC Speed" forceable="true" value_do_not_care="false">
            <enum name="AgcMode" desc="List of supported AGC Speed Modes">
                <members>
                    <member name="NORMAL" value="0" desc="Recommended default setting"/>
                    <member name="FAST" value="1" desc="Aggressive AGC setting"/>
                    <member name="SLOW" value="2" desc="Slow AGC setting"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agc_delays()</name>
                <name>CALC_AGC.calc_faststepdown_reg()</name>
                <name>CALC_AGC.calc_pkdwait_reg()</name>
                <name>CALC_AGC.calc_agc_delays()</name>
                <name>CALC_AGC.calc_faststepdown_reg()</name>
                <name>CALC_AGC.calc_pkdwait_reg()</name>
                <name>CALC_AGC.calc_agc_delays()</name>
                <name>CALC_AGC.calc_faststepdown_reg()</name>
                <name>CALC_AGC.calc_pkdwait_reg()</name>
                <name>CALC_AGC.calc_agc_delays()</name>
                <name>CALC_AGC.calc_faststepdown_reg()</name>
                <name>CALC_AGC.calc_pkdwait_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="lna_slices_delay" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="fast_loop_delay" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="if_pga_delay" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_CTRL0_ADCRESETDURATION" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL0.ADCRESETDURATION" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL0_RSSISHIFT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL0.RSSISHIFT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>78</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL0_PWRTARGET" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL0.PWRTARGET" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_CTRL0_MODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL0.MODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_CTRL1_AGCPERIOD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL1.AGCPERIOD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agcperiod_actual()</name>
                <name>CALC_AGC.calc_agcperiod_actual()</name>
                <name>CALC_AGC.calc_agcperiod_actual()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agcperiod_reg()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL1_RSSIPERIOD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL1.RSSIPERIOD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_rssi_period_actual()</name>
                <name>CALC_AGC.calc_rssi_period_actual()</name>
                <name>CALC_AGC.calc_rssi_period_actual()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_rssiperiod_reg()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL1_SUBPERIOD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL1.SUBPERIOD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL1_SUBINT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL1.SUBINT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL1_SUBNUM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL1.SUBNUM" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL1_SUBDEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL1.SUBDEN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL2_ADCRSTSTARTUP" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL2.ADCRSTSTARTUP" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL2_MAXPWRVAR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL2.MAXPWRVAR" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL2_HYST" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL2.HYST" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_hyst_reg()</name>
            </access_write>
        </variable>
        <variable name="AGC_CTRL2_FASTLOOPDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL2.FASTLOOPDEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_CTRL2_CFLOOPDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.CTRL2.CFLOOPDEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAINSTEPLIM_CFLOOPSTEPMAX" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAINSTEPLIM.CFLOOPSTEPMAX" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAINSTEPLIM_FASTSTEPUP" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAINSTEPLIM.FASTSTEPUP" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAINSTEPLIM_FASTSTEPDOWN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAINSTEPLIM.FASTSTEPDOWN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_LOOPDEL_LNASLICESDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.LOOPDEL.LNASLICESDEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_LOOPDEL_IFPGADEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.LOOPDEL.IFPGADEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_LOOPDEL_PKDWAIT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.LOOPDEL.PKDWAIT" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAINRANGE_MAXGAIN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAINRANGE.MAXGAIN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAINRANGE_MINGAIN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAINRANGE.MINGAIN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAININDEX_MININDEXDEGEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAININDEX.MININDEXDEGEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAININDEX_MININDEXPGA" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAININDEX.MININDEXPGA" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAININDEX_NUMINDEXATTEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAININDEX.NUMINDEXATTEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAININDEX_NUMINDEXSLICES" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAININDEX.NUMINDEXSLICES" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAININDEX_NUMINDEXDEGEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAININDEX.NUMINDEXDEGEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_GAININDEX_NUMINDEXPGA" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.GAININDEX.NUMINDEXPGA" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MININDEX_INDEXMINPGA" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MININDEX.INDEXMINPGA" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MININDEX_INDEXMINDEGEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MININDEX.INDEXMINDEGEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MININDEX_INDEXMINSLICES" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MININDEX.INDEXMINSLICES" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MININDEX_INDEXMINATTEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MININDEX.INDEXMINATTEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MANGAIN_MANGAININDEX" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MANGAIN.MANGAININDEX" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_MANGAIN_MANGAININDEXEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MANGAIN.MANGAININDEXEN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_MANGAIN_MANGAINLNAATTEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MANGAIN.MANGAINLNAATTEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MANGAIN_MANGAINLNASLICES" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MANGAIN.MANGAINLNASLICES" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_MANGAIN_MANGAINLNASLICESREG" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.MANGAIN.MANGAINLNASLICESREG" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="AGC_IFPEAKDET_PKDTHRESH1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.IFPEAKDET.PKDTHRESH1" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="AGC_IFPEAKDET_PKDTHRESH2" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="AGC.IFPEAKDET.PKDTHRESH2" value_do_not_care="false">
            <values>
                <calculated>
                    <value>8</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agc_misc()</name>
            </access_write>
        </variable>
        <variable name="test_per" type="bool" is_array="false" format="ascii" desc="Enable to reconfigure for PER testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="test_ber" type="bool" is_array="false" format="ascii" desc="Enable to reconfigure for BER testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="ber_force_fdm0" type="bool" is_array="false" format="ascii" desc="Force fdm0 mode for ber testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_write>
        </variable>
        <variable name="ber_force_sync" type="bool" is_array="false" format="ascii" desc="Force a specific sync word for ber testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_write>
        </variable>
        <variable name="ber_force_bitorder" type="bool" is_array="false" format="ascii" desc="Force a specific bit ordering for ber testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame()</name>
            </access_read>
            <access_write>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_write>
        </variable>
        <variable name="ber_force_whitening" type="bool" is_array="false" format="ascii" desc="Force a specific de-whitening configuration for ber testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
            </access_read>
            <access_write>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_write>
        </variable>
        <variable name="ber_force_infinite_length" type="bool" is_array="false" format="ascii" desc="Force infinite length mode for ber testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_write>
        </variable>
        <variable name="ber_force_freq_comp_off" type="bool" is_array="false" format="ascii" desc="Disable frequency compensation during BER testing" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Ber.calc_ber_forces()</name>
            </access_write>
        </variable>
        <variable name="crc_poly" type="enum" is_array="false" format="decimal" desc="List of supported CRC Polynomials" forceable="true" value_do_not_care="false">
            <enum name="CrcPolyEnum" desc="List of supported CRC Polynomials">
                <members>
                    <member name="NONE" value="0" desc="No CRC"/>
                    <member name="CRC_8" value="1" desc="X8+X2+X+1"/>
                    <member name="CRC_16" value="2" desc="X16+X15+X2+1"/>
                    <member name="CCITT_16" value="3" desc="X16+X12+X5+1"/>
                    <member name="DNP_16" value="4" desc="X16+X13+X12+X11+X10+X8+X6+X5+X2+1"/>
                    <member name="BLE_24" value="5" desc="X24+X10+X9+X6+X4+X3+X+1"/>
                    <member name="CRC_32Q" value="6" desc="X32+X31+X24+X22+X16+X14+X8+X7+X5+X3+X+1"/>
                    <member name="ANSIX366_1979" value="7" desc="X32+X26+X23+X22+X16+X12+X11+X10+X8+X7+X5+X4+X2+X+1"/>
                    <member name="ZWAVE" value="8" desc="X8+1"/>
                    <member name="BCH15_11" value="9" desc="X4+X+1"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>CrcPolyEnum.CRC_16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
                <name>CALC_Frame.calc_check_crc_poly()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="crc_seed" type="int" is_array="false" format="hex" desc="CRC Initialization Value" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="crc_byte_endian" type="enum" is_array="false" format="decimal" desc="CRC Byte Endianness" forceable="true" value_do_not_care="false">
            <enum name="CrcByteEndian" desc="Define how the CRC bytes are transmitted over the air">
                <members>
                    <member name="LSB_FIRST" value="0" desc="Least significant byte of the CRC is transmitted first."/>
                    <member name="MSB_FIRST" value="1" desc="Most significant byte of the CRC is transmitted first."/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>CrcByteEndian.MSB_FIRST</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="crc_bit_endian" type="enum" is_array="false" format="decimal" desc="CRC Bit Endianness" forceable="true" value_do_not_care="false">
            <enum name="CrcBitEndian" desc="Define how the CRC bits are transmitted over the air">
                <members>
                    <member name="LSB_FIRST" value="0" desc="Over the air CRC bit order is sent least significant bit first."/>
                    <member name="MSB_FIRST" value="1" desc="Over the air CRC bit order is sent most significant bit first"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>CrcBitEndian.MSB_FIRST</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="crc_pad_input" type="bool" is_array="false" format="ascii" desc="Set to true to enable zero padding of the CRC input data." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="crc_input_order" type="enum" is_array="false" format="decimal" desc="Define the order data bits are fed into the CRC generator" forceable="true" value_do_not_care="false">
            <enum name="CrcInputOrderEnum" desc="Define the order data bits are fed into the CRC generator">
                <members>
                    <member name="LSB_FIRST" value="0" desc="The least significant data bit is first input to the CRC generator"/>
                    <member name="MSB_FIRST" value="1" desc="The most significant data bit is first input to the CRC generator"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>CrcInputOrderEnum.LSB_FIRST</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="crc_invert" type="bool" is_array="false" format="ascii" desc="Set to true if the CRC result is inverted" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_PADCRCINPUT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.PADCRCINPUT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_BITSPERWORD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.BITSPERWORD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>7</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_BITREVERSE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.BITREVERSE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_BYTEREVERSE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.BYTEREVERSE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_INPUTBITORDER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.INPUTBITORDER" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_CRCWIDTH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.CRCWIDTH" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_CTRL_OUTPUTINV" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CTRL.OUTPUTINV" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_INIT_INIT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.INIT.INIT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="CRC_POLY_POLY" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.POLY.POLY" value_do_not_care="false">
            <values>
                <calculated>
                    <value>40961</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="crc_polynomial" type="int" is_array="false" format="hex" desc="CRC polynomial" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>98309</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="crc_size" type="int" is_array="false" format="hex" desc="Size of CRC in bytes" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_read>
            <access_write>
                <name>CALC_CRC.calc_crc_settings()</name>
            </access_write>
        </variable>
        <variable name="cost_bandwidth" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cost_osr" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cost_range" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cost_rate" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cost_src" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cost_fc" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cost_total" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="sample_freq_actual" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="src1_calcDenominator" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="src2_calcDenominator" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="fxo_or_fdec8" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_freq_gain_value()</name>
                <name>CALC_Demodulator.calc_rx_freq_dev_actual()</name>
                <name>CALC_Demodulator.calc_sample_freq_actual()</name>
                <name>CALC_Demodulator.calc_freq_gain_value()</name>
                <name>CALC_Demodulator.calc_rx_freq_dev_actual()</name>
                <name>CALC_Demodulator.calc_sample_freq_actual()</name>
                <name>CALC_Demodulator.calc_freq_gain_value()</name>
                <name>CALC_Demodulator.calc_rx_freq_dev_actual()</name>
                <name>CALC_Demodulator.calc_sample_freq_actual()</name>
                <name>CALC_Demodulator.calc_freq_gain_value()</name>
                <name>CALC_Demodulator.calc_rx_freq_dev_actual()</name>
                <name>CALC_Demodulator.calc_sample_freq_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="src1_bit_width" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>8</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_src12_bit_widths()</name>
            </access_write>
        </variable>
        <variable name="src2_bit_width" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>11</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_src12_bit_widths()</name>
            </access_write>
        </variable>
        <variable name="ch_filt_bw_available" type="int" is_array="true" format="decimal" desc="Values of BWSEL available to use in SRC calculation." forceable="true" units="unitless" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="src1_range_available" type="int" is_array="true" format="decimal" desc="Values of SRCRATIO1 available to use in SRC calculation." forceable="true" units="unitless" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="input_decimation_filter_allow_dec3" type="int" is_array="false" format="decimal" desc="1=Allow input decimation filter decimate by 3" forceable="true" units="unitless" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_dec0_values_available()</name>
            </access_write>
        </variable>
        <variable name="input_decimation_filter_allow_dec8" type="int" is_array="false" format="decimal" desc="1=Allow input decimation filter decimate by 8" forceable="true" units="unitless" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_dec0_values_available()</name>
            </access_write>
        </variable>
        <variable name="rx_ch_hopping_order_num" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_ch_hopping_mode" type="enum" is_array="false" format="decimal" desc="For receive scanning PHYs: event to trigger a hop to next PHY" forceable="true" value_do_not_care="false">
            <enum name="RAILRxChHoppingEnum" desc="List of supported RAIL RX channel hopping modes">
                <members>
                    <member name="RAIL_RX_CHANNEL_HOPPING_MODE_MANUAL" value="0" desc="Manual mode"/>
                    <member name="RAIL_RX_CHANNEL_HOPPING_MODE_TIMEOUT" value="1" desc="Fixed time out"/>
                    <member name="RAIL_RX_CHANNEL_HOPPING_MODE_TIMING_SENSE" value="2" desc="Timing sense"/>
                    <member name="RAIL_RX_CHANNEL_HOPPING_MODE_PREAMBLE_SENSE" value="3" desc="Preamble sense"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_ch_hopping_delay_usec" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="viterbi_demod_expect_patt" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="viterbi_demod_expect_patt_head_tail" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="src1_range_available_minimum" type="int" is_array="false" format="decimal" desc="SRC range minimum" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="viterbidemod_disdemodof_viterbi_demod_disable_overflow_detect" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="antdivmode" type="enum" is_array="false" format="decimal" desc="Antenna diversity mode" forceable="true" value_do_not_care="false">
            <enum name="AntDivModeEnum" desc="List of supported antenna diversity mode">
                <members>
                    <member name="DISABLE" value="0" desc="Disabled. Only Antenna 0 used"/>
                    <member name="ANTSELFIRST" value="2" desc="Select-First algorithm"/>
                    <member name="ANTSELRSSI" value="4" desc="Select-Best algorithm based on RSSI value"/>
                </members>
            </enum>
            <values>
                <calculated>
                    <value>AntDivModeEnum.DISABLE</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_reg()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_reg()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
            </access_read>
            <access_write>
                <name>CALC_Diversity.calc_diversity_values()</name>
            </access_write>
        </variable>
        <variable name="antdivrepeatdis" type="enum" is_array="false" format="decimal" desc="Repeated measurement of first antenna when Select-Best algorithm is used" forceable="true" value_do_not_care="false">
            <enum name="AntDivRepeatDisModeEnum" desc="Enable or disable repeated measurement of first antenna">
                <members>
                    <member name="REPEATFIRST" value="0" desc="Enable repeated measurement of first antenna"/>
                    <member name="NOREPEATFIRST" value="1" desc="Disable repeated measurement of first antenna"/>
                </members>
            </enum>
            <values>
                <calculated>
                    <value>AntDivRepeatDisModeEnum.REPEATFIRST</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
            </access_read>
            <access_write>
                <name>CALC_Diversity.calc_diversity_values()</name>
            </access_write>
        </variable>
        <variable name="div_antdivmode" type="int" is_array="false" format="decimal" desc="Antenna diversity mode" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="div_antdivrepeatdis" type="int" is_array="false" format="decimal" desc="Repeated measurement of first antenna when Select-Best algorithm is used" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="fec_en" type="enum" is_array="false" format="decimal" desc="List of supported FEC Configurations" forceable="true" value_do_not_care="false">
            <enum name="FECEnum" desc="List of supported FEC Configurations">
                <members>
                    <member name="NONE" value="0" desc="No FEC"/>
                    <member name="FEC_154G" value="1" desc="15.4G FEC settings"/>
                    <member name="FEC_154G_K7" value="2" desc="15.4G FEC settings with K=7"/>
                </members>
            </enum>
            <values>
                <calculated>
                    <value>FECEnum.NONE</value>
                </calculated>
                <forced>
                    <value>FECEnum.NONE</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_FEC.calc_fec()</name>
                <name>CALC_FEC.calc_feccrl_interleavemode_reg()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_CONVMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_FEC.calc_fec()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_CONVDECODEMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVDECODEMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FECCTRL_CONVTRACEBACKDISABLE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVTRACEBACKDISABLE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_CONVINV" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVINV" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fecctrl_convinv_reg()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_INTERLEAVEMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.INTERLEAVEMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_feccrl_interleavemode_reg()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_INTERLEAVEFIRSTINDEX" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.INTERLEAVEFIRSTINDEX" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_INTERLEAVEWIDTH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.INTERLEAVEWIDTH" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FECCTRL_CONVBUSLOCK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVBUSLOCK" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_CONVSUBFRAMETERMINATE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVSUBFRAMETERMINATE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_SINGLEBLOCK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.SINGLEBLOCK" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_FORCE2FSK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.FORCE2FSK" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_CONVHARDERROR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.CONVHARDERROR" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_TRAILTXDATACTRL_TRAILTXDATA" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.TRAILTXDATACTRL.TRAILTXDATA" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_TRAILTXDATACTRL_TRAILTXDATACNT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.TRAILTXDATACTRL.TRAILTXDATACNT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_TRAILTXDATACTRL_TRAILTXDATAFORCE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.TRAILTXDATACTRL.TRAILTXDATAFORCE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_CONVGENERATOR_GENERATOR0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CONVGENERATOR.GENERATOR0" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_FEC.calc_convolutional_decoder_buffer_size()</name>
                <name>CALC_FEC.calc_convolutional_decoder_buffer_size()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_CONVGENERATOR_GENERATOR1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CONVGENERATOR.GENERATOR1" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_FEC.calc_convolutional_decoder_buffer_size()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_CONVGENERATOR_RECURSIVE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CONVGENERATOR.RECURSIVE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_convgenerator_recursive_reg()</name>
            </access_write>
        </variable>
        <variable name="FRC_CONVGENERATOR_NONSYSTEMATIC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CONVGENERATOR.NONSYSTEMATIC" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_PUNCTCTRL_PUNCT0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.PUNCTCTRL.PUNCT0" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="FRC_PUNCTCTRL_PUNCT1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.PUNCTCTRL.PUNCT1" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="frc_conv_decoder_buffer_size" type="int" is_array="false" format="decimal" desc="Size (in bytes) of the buffer necessary for the Convolutional Decoder" forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_convolutional_decoder_buffer_size()</name>
            </access_write>
        </variable>
        <variable name="fec_enabled" type="int" is_array="false" format="decimal" desc="FEC enabled flag" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
            </access_read>
            <access_write>
                <name>CALC_FEC.calc_fec()</name>
            </access_write>
        </variable>
        <variable name="MODEM_RAMPLEV_RAMPLEV0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.RAMPLEV.RAMPLEV0" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_RAMPLEV_RAMPLEV1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.RAMPLEV.RAMPLEV1" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_RAMPLEV_RAMPLEV2" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.RAMPLEV.RAMPLEV2" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_LPFCTRL_LPFBW" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LPFCTRL.LPFBW" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Firmware.calc_reserve_fields()</name>
            </access_write>
        </variable>
        <variable name="CRC_CMD_INITIALIZE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="CRC.CMD.INITIALIZE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Firmware.calc_reserve_fields()</name>
            </access_write>
        </variable>
        <variable name="IR_CAL_StandardSet" type="enum" is_array="false" format="decimal" desc="The RPC config function to select the IRCAL value from CC page" forceable="true" value_do_not_care="false">
            <enum name="RADIO_IRCalStd_t" desc="An enum to select the IR CAL settings.">
                <members>
                    <member name="RADIO_IRCAL_SET_2P4_BLE" value="0" desc="Select 2.4GHz BLE standard"/>
                    <member name="RADIO_IRCAL_SET_2P4_IEEE802154" value="1" desc="Select 2.4 GHz ZigBee standard"/>
                    <member name="RADIO_IRCAL_SET_SUBGIG" value="2" desc="Select proprietary sub-GHz standard"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frame_bitendian" type="enum" is_array="false" format="decimal" desc="Define how the payload bits are transmitted over the air" forceable="true" value_do_not_care="false">
            <enum name="bitEndian" desc="Define how the payload bits are transmitted over the air">
                <members>
                    <member name="LSB_FIRST" value="0" desc="Least significant bit is transmitted first over the air"/>
                    <member name="MSB_FIRST" value="1" desc="Most significant bit is transmitted first over the air"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>bitEndian.LSB_FIRST</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_CRC.calc_crc_settings()</name>
                <name>CALC_Frame.calc_frame()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="firstframe_bitsperword" type="int" is_array="false" format="decimal" desc="First word in a frame contains (BITSPERWORD+1) bits, while all following words always contain 8 bits. In most cases, set to 7." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>7</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame()</name>
                <name>CALC_Frame.calc_frame()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame()</name>
            </access_write>
        </variable>
        <variable name="frame_length_type" type="enum" is_array="false" format="decimal" desc="Possible Length Configurations" forceable="true" value_do_not_care="false">
            <enum name="FrameLengthEnum" desc="List of supported frame length configurations">
                <members>
                    <member name="FIXED_LENGTH" value="0" desc="The frame length is fixed and never changes"/>
                    <member name="VARIABLE_LENGTH" value="1" desc="The frame length is determined by an explicit length field within the packet. Requires header to be enabled."/>
                    <member name="FRAME_TYPE" value="2" desc="The packet length is determined from an encoded set of bit that implicitly determines the length"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>FrameLengthEnum.FIXED_LENGTH</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="payload_white_en" type="bool" is_array="false" format="ascii" desc="Set to true to whiten the payload" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="payload_crc_en" type="bool" is_array="false" format="ascii" desc="Set to true to check/transmit crc after the payload" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_check_crc_poly()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="accept_crc_errors" type="bool" is_array="false" format="ascii" desc="Set to true if you want to accept invalid crcs" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="payload_addtrailtxdata_en" type="bool" is_array="false" format="ascii" desc="Set to true to add Trail TX data at the end of the frame" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_possible_future_inputs()</name>
            </access_write>
        </variable>
        <variable name="payload_excludesubframewcnt_en" type="bool" is_array="false" format="ascii" desc="Set to true to exclude words in the subframe from the Word Counter (WCNT), useful in Dynamic Frame Length (DFL) mode" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_possible_future_inputs()</name>
            </access_write>
        </variable>
        <variable name="header_en" type="bool" is_array="false" format="ascii" desc="Set to true to enable a distinct header from the payload." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_header_bytes()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="header_size" type="int" is_array="false" format="decimal" desc="Define the number of bytes that make up the header. Include the variable length byte(s)." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced>
                    <value>1</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="header_calc_crc" type="bool" is_array="false" format="ascii" desc="Set to true to include the header bytes in the payload CRC." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="header_include_crc" type="bool" is_array="false" format="ascii" desc="Set to true to check/transmit crc specifically for the header" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_check_crc_poly()</name>
                <name>CALC_Frame.calc_check_crc_poly()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_possible_future_inputs()</name>
            </access_write>
        </variable>
        <variable name="header_white_en" type="bool" is_array="false" format="ascii" desc="Set to true to enable whitening over the header" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="header_addtrailtxdata_en" type="bool" is_array="false" format="ascii" desc="Set to true to add Trail TX data at the end of the frame" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_possible_future_inputs()</name>
            </access_write>
        </variable>
        <variable name="header_excludesubframewcnt_en" type="bool" is_array="false" format="ascii" desc="Set to true to exclude words in the subframe from the Word Counter (WCNT), useful in Dynamic Frame Length (DFL) mode" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_possible_future_inputs()</name>
            </access_write>
        </variable>
        <variable name="fixed_length_size" type="int" is_array="false" format="decimal" desc="Define the number of bytes in the payload. This does not include the length of the header if used. Header + Payload must be less than 4096 bytes." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced>
                    <value>1</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_numbits" type="int" is_array="false" format="decimal" desc="Define the size of the variable length field in bits." forceable="true" units="bits" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_var_length_numbytes()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_byteendian" type="enum" is_array="false" format="decimal" desc="Define the byte endianness of the variable length field" forceable="true" value_do_not_care="false">
            <enum name="VarLengthByteEndian" desc="Define how the variable length byte(s) are transmitted over the air">
                <members>
                    <member name="LSB_FIRST" value="0" desc="The least significant byte of the variable length field is transmitted over the air first."/>
                    <member name="MSB_FIRST" value="1" desc="The most significant byte of the variable length field is transmitted over the air first."/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>VarLengthByteEndian.LSB_FIRST</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_bitendian" type="enum" is_array="false" format="decimal" desc="Define the bit endianness of the variable length field" forceable="true" value_do_not_care="false">
            <enum name="VarLengthBitEndian" desc="Define how the variable length bits are transmitted over the air">
                <members>
                    <member name="LSB_FIRST" value="0" desc="The variable length field is transmitted least signficant bit first."/>
                    <member name="MSB_FIRST" value="1" desc="The variable length field is transmitted most significant bit first."/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>VarLengthBitEndian.LSB_FIRST</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_shift" type="int" is_array="false" format="decimal" desc="Define the location of the least significant bit of the variable length field." forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_var_length_numbytes()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_minlength" type="int" is_array="false" format="decimal" desc="Define the minimum value of the variable length field." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_maxlength" type="int" is_array="false" format="decimal" desc="Define the maximum value of the variable length field. Cannot exceed the variable length size." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_includecrc" type="bool" is_array="false" format="ascii" desc="Set to true if the crc bytes are included in the variable length" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_adjust" type="int" is_array="false" format="decimal" desc="Value to add to the variable length extracted from the packet when calculating the total payload length to receive.  A positive number here indicates the payload will be larger than the length value extracted from the variable length bits." forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_loc" type="int" is_array="false" format="decimal" desc="Define the zero-based start location in the frame that holds the frame type encoding." forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_mask" type="int" is_array="false" format="hex" desc="Define the bitmask to extract the frame type in the byte." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frame_type_bits" type="int" is_array="false" format="decimal" desc="Define the number of bits of the frame type field." forceable="true" units="bits" value_do_not_care="false">
            <values>
                <calculated>
                    <value>6</value>
                </calculated>
                <forced>
                    <value>3</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_lsbit" type="int" is_array="false" format="decimal" desc="Define the bit location of the frame type's least significant bit." forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_lengths" type="int" is_array="true" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frame_type_valid" type="bool" is_array="true" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frame_type_filter" type="bool" is_array="true" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frame_type_0_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_1_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_2_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_3_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_4_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_5_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_6_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_7_length" type="int" is_array="false" format="decimal" desc="Define the frame length of each frame type." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>32</value>
                </calculated>
                <forced>
                    <value>16</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_0_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_1_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_2_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_3_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_4_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_5_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_6_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_7_valid" type="bool" is_array="false" format="ascii" desc="Define the valid frame types." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>True</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_0_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_1_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_2_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_3_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_4_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_5_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_6_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_type_7_filter" type="bool" is_array="false" format="ascii" desc="Define the frame types that should have address filtering applied." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="var_length_loc" type="int" is_array="false" format="decimal" desc="Define the zero-based start location in the header that holds the first byte of the variable length field." forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_var_length_loc()</name>
            </access_write>
        </variable>
        <variable name="var_length_numbytes" type="int" is_array="false" format="decimal" desc="Define the size of the variable length field in bytes." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_var_length_numbytes()</name>
            </access_write>
        </variable>
        <variable name="header_size_internal" type="int" is_array="false" format="decimal" desc="Internal representation of header size. 0 for no header." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
                <name>CALC_Frame.calc_var_length_loc()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_header_bytes()</name>
            </access_write>
        </variable>
        <variable name="FRC_CTRL_BITSPERWORD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CTRL.BITSPERWORD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>7</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame()</name>
            </access_write>
        </variable>
        <variable name="FRC_CTRL_RXFCDMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CTRL.RXFCDMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_CTRL_TXFCDMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CTRL.TXFCDMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_CTRL_BITORDER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CTRL.BITORDER" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame()</name>
            </access_write>
        </variable>
        <variable name="FRC_CTRL_UARTMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.CTRL.UARTMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_uartmode()</name>
            </access_write>
        </variable>
        <variable name="FRC_WCNTCMP0_FRAMELENGTH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WCNTCMP0.FRAMELENGTH" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_WCNTCMP1_LENGTHFIELDLOC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WCNTCMP1.LENGTHFIELDLOC" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_DFLINCLUDECRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.DFLINCLUDECRC" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_MINLENGTH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.MINLENGTH" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_DFLBITS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.DFLBITS" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_DFLOFFSET" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.DFLOFFSET" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_DFLSHIFT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.DFLSHIFT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_DFLBITORDER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.DFLBITORDER" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_DFLCTRL_DFLMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.DFLCTRL.DFLMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_MAXLENGTH_MAXLENGTH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.MAXLENGTH.MAXLENGTH" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame.calc_frame_length()</name>
            </access_write>
        </variable>
        <variable name="FRC_FCD0_SKIPWHITE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD0.SKIPWHITE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD0_SKIPCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD0.SKIPCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD0_CALCCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD0.CALCCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD0_INCLUDECRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD0.INCLUDECRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD0_BUFFER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD0.BUFFER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD0_WORDS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD0.WORDS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD1_SKIPWHITE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD1.SKIPWHITE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD1_SKIPCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD1.SKIPCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD1_CALCCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD1.CALCCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD1_INCLUDECRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD1.INCLUDECRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD1_BUFFER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD1.BUFFER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD1_WORDS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD1.WORDS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD2_SKIPWHITE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD2.SKIPWHITE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD2_SKIPCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD2.SKIPCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD2_CALCCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD2.CALCCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD2_INCLUDECRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD2.INCLUDECRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD2_BUFFER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD2.BUFFER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD2_WORDS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD2.WORDS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD3_SKIPWHITE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD3.SKIPWHITE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD3_SKIPCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD3.SKIPCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD3_CALCCRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD3.CALCCRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD3_INCLUDECRC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD3.INCLUDECRC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD3_BUFFER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD3.BUFFER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="FRC_FCD3_WORDS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FCD3.WORDS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="preamble_string" type="string" is_array="false" format="ascii" desc="Output string representing the preamble pattern in binary" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_string" type="string" is_array="false" format="ascii" desc="Output string representing the sync word in binary" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_dualsync" type="bool" is_array="false" format="ascii" desc="Enable dual syncword detection" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_dualsync_reg()</name>
                <name>CALC_Frame_Detect.calc_dualsync_reg()</name>
                <name>CALC_Frame_Detect.calc_dualsync_reg()</name>
                <name>CALC_Frame_Detect.calc_dualsync_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_0_actual" type="int" is_array="false" format="hex" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_1_actual" type="int" is_array="false" format="hex" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_dualsync()</name>
                <name>CALC_Frame_Detect.calc_dualsync()</name>
                <name>CALC_Frame_Detect.calc_dualsync()</name>
                <name>CALC_Frame_Detect.calc_dualsync()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_DUALSYNC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.DUALSYNC" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_FDM0DIFFDIS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.FDM0DIFFDIS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="afc_step_scale" type="float" is_array="false" format="decimal" desc="Scale applied to the default frequency adjustment step size" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1.0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Freq_Offset_Comp.calc_afc_step_scale_val()</name>
            </access_write>
        </variable>
        <variable name="modulation_type" type="enum" is_array="false" format="decimal" desc="Defines the modulation type." forceable="true" value_do_not_care="false">
            <enum name="ModModeEnum" desc="Defines the modulation type.">
                <members>
                    <member name="FSK2" value="0" desc="Frequency Shift Keying on two frequencies"/>
                    <member name="FSK4" value="1" desc="Frequency Shift Keying on four frequencies"/>
                    <member name="BPSK" value="2" desc="Binary Phase Shift Keying: the 2 symbols are represented by 0 or 180 degree phase shifts wrt the carrier"/>
                    <member name="DBPSK" value="3" desc="Differential Binary Phase Shift Keying: the 2 symbols are represented by 0 or 180 degree phase shifts wrt the preceding symbol"/>
                    <member name="OOK" value="4" desc="On Off Keying: the 2 symbols are represented by the presence / absence of the carrier"/>
                    <member name="ASK" value="5" desc="Amplitude Shift Keying: the 2 symbols are represented by two different power levels of the carrier"/>
                    <member name="MSK" value="6" desc="Minimum Shift Keying: Special case of FSK2 where the phase shift in one symbol is +/- 90 degree"/>
                    <member name="OQPSK" value="7" desc="Offset Quadrature Phase Shift Keying: 4 state phase modulation with 0, 90, 180 and 270 degrees wrt the carrier. Only +/-90 degree changes are allowed at any one transition that take place at twice the symbol rate."/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agc_cfloopstepmax_reg()</name>
                <name>CALC_AGC.calc_agc_faststepup_reg()</name>
                <name>CALC_AGC.calc_agc_mode_reg()</name>
                <name>CALC_AGC.calc_agc_speed_val()</name>
                <name>CALC_AGC.calc_pwrtarget_val()</name>
                <name>CALC_Demodulator.calc_baudrate()</name>
                <name>CALC_Demodulator.calc_datafilter_reg()</name>
                <name>CALC_Demodulator.calc_devoffcomp_reg()</name>
                <name>CALC_Demodulator.calc_isicomp_reg()</name>
                <name>CALC_Demodulator.calc_mod_type_reg()</name>
                <name>CALC_Demodulator.calc_offsetphasemasking_reg()</name>
                <name>CALC_FEC.calc_fecctrl_interleavewidth_reg()</name>
                <name>CALC_Frame_Detect.calc_fdm0diffdis_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_value()</name>
                <name>CALC_Frame_Detect.calc_tr_td_edge()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestlim_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_val()</name>
                <name>CALC_Misc.calc_in_2fsk_opt_scope()</name>
                <name>CALC_Modulator.calc_mapfsk_reg()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_tx_freq_dev_actual()</name>
                <name>CALC_AGC.calc_agc_cfloopstepmax_reg()</name>
                <name>CALC_AGC.calc_agc_faststepup_reg()</name>
                <name>CALC_AGC.calc_agc_mode_reg()</name>
                <name>CALC_AGC.calc_agc_speed_val()</name>
                <name>CALC_AGC.calc_pwrtarget_val()</name>
                <name>CALC_Demodulator.calc_baudrate()</name>
                <name>CALC_Demodulator.calc_datafilter_reg()</name>
                <name>CALC_Demodulator.calc_devoffcomp_reg()</name>
                <name>CALC_Demodulator.calc_isicomp_reg()</name>
                <name>CALC_Demodulator.calc_mod_type_reg()</name>
                <name>CALC_Demodulator.calc_offsetphasemasking_reg()</name>
                <name>CALC_FEC.calc_fecctrl_interleavewidth_reg()</name>
                <name>CALC_Frame_Detect.calc_fdm0diffdis_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_value()</name>
                <name>CALC_Frame_Detect.calc_tr_td_edge()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestlim_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_val()</name>
                <name>CALC_Misc.calc_in_2fsk_opt_scope()</name>
                <name>CALC_Modulator.calc_mapfsk_reg()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_tx_freq_dev_actual()</name>
                <name>CALC_AGC.calc_agc_cfloopstepmax_reg()</name>
                <name>CALC_AGC.calc_agc_faststepup_reg()</name>
                <name>CALC_AGC.calc_agc_mode_reg()</name>
                <name>CALC_AGC.calc_agc_speed_val()</name>
                <name>CALC_AGC.calc_pwrtarget_val()</name>
                <name>CALC_Demodulator.calc_baudrate()</name>
                <name>CALC_Demodulator.calc_datafilter_reg()</name>
                <name>CALC_Demodulator.calc_devoffcomp_reg()</name>
                <name>CALC_Demodulator.calc_isicomp_reg()</name>
                <name>CALC_Demodulator.calc_mod_type_reg()</name>
                <name>CALC_Demodulator.calc_offsetphasemasking_reg()</name>
                <name>CALC_FEC.calc_fecctrl_interleavewidth_reg()</name>
                <name>CALC_Frame_Detect.calc_fdm0diffdis_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_value()</name>
                <name>CALC_Frame_Detect.calc_tr_td_edge()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestlim_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_val()</name>
                <name>CALC_Misc.calc_in_2fsk_opt_scope()</name>
                <name>CALC_Modulator.calc_mapfsk_reg()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_tx_freq_dev_actual()</name>
                <name>CALC_AGC.calc_agc_cfloopstepmax_reg()</name>
                <name>CALC_AGC.calc_agc_faststepup_reg()</name>
                <name>CALC_AGC.calc_agc_mode_reg()</name>
                <name>CALC_AGC.calc_agc_speed_val()</name>
                <name>CALC_AGC.calc_pwrtarget_val()</name>
                <name>CALC_Demodulator.calc_baudrate()</name>
                <name>CALC_Demodulator.calc_datafilter_reg()</name>
                <name>CALC_Demodulator.calc_devoffcomp_reg()</name>
                <name>CALC_Demodulator.calc_isicomp_reg()</name>
                <name>CALC_Demodulator.calc_mod_type_reg()</name>
                <name>CALC_Demodulator.calc_offsetphasemasking_reg()</name>
                <name>CALC_FEC.calc_fecctrl_interleavewidth_reg()</name>
                <name>CALC_Frame_Detect.calc_fdm0diffdis_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_value()</name>
                <name>CALC_Frame_Detect.calc_tr_td_edge()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestlim_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_val()</name>
                <name>CALC_Misc.calc_in_2fsk_opt_scope()</name>
                <name>CALC_Modulator.calc_mapfsk_reg()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_tx_freq_dev_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="xtal_frequency_hz" type="int" is_array="false" format="decimal" desc="EFR32 crystal clock frequency." forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Profile_Base.calc_map_inputs()</name>
                <name>CALC_Profile_Base.calc_map_inputs()</name>
                <name>CALC_Profile_Base.calc_map_inputs()</name>
                <name>CALC_Profile_Base.calc_map_inputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_xtal_error_ppm" type="int" is_array="false" format="decimal" desc="Crystal clock tolerance of receiver." forceable="true" units="ppm" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tx_xtal_error_ppm" type="int" is_array="false" format="decimal" desc="Crystal clock tolerance of the transmitter." forceable="true" units="ppm" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="deviation" type="int" is_array="false" format="decimal" desc="Frequency deviation used in FSK modulation schemes" forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="base_frequency_hz" type="int" is_array="false" format="decimal" desc="RF frequency of channel 0." forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="bitrate" type="int" is_array="false" format="decimal" desc="Bit rate after channel coding and before symbol coding." forceable="true" units="bps" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_IrCal.calc_ircal_datarate_considerations()</name>
                <name>CALC_Utilities.calc_target_sensitivity()</name>
                <name>CALC_IrCal.calc_ircal_datarate_considerations()</name>
                <name>CALC_Utilities.calc_target_sensitivity()</name>
                <name>CALC_IrCal.calc_ircal_datarate_considerations()</name>
                <name>CALC_Utilities.calc_target_sensitivity()</name>
                <name>CALC_IrCal.calc_ircal_datarate_considerations()</name>
                <name>CALC_Utilities.calc_target_sensitivity()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_chipping_code" type="int" is_array="false" format="hex" desc="DSSS chipping code" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_dsss0_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss0_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss0_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss0_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_len" type="int" is_array="false" format="decimal" desc="DSSS chipping code length in chips" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_phasedemod_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss_bits_per_symbol()</name>
                <name>CALC_Frame_Detect.calc_dsssdouble_reg()</name>
                <name>CALC_Frame_Detect.calc_dssslen_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_val()</name>
                <name>CALC_Demodulator.calc_phasedemod_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss_bits_per_symbol()</name>
                <name>CALC_Frame_Detect.calc_dsssdouble_reg()</name>
                <name>CALC_Frame_Detect.calc_dssslen_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_val()</name>
                <name>CALC_Demodulator.calc_phasedemod_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss_bits_per_symbol()</name>
                <name>CALC_Frame_Detect.calc_dsssdouble_reg()</name>
                <name>CALC_Frame_Detect.calc_dssslen_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_val()</name>
                <name>CALC_Demodulator.calc_phasedemod_reg()</name>
                <name>CALC_Frame_Detect.calc_dsss_bits_per_symbol()</name>
                <name>CALC_Frame_Detect.calc_dsssdouble_reg()</name>
                <name>CALC_Frame_Detect.calc_dssslen_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_val()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_spreading_factor" type="int" is_array="false" format="decimal" desc="DSSS spreading factor = Tbit/Tchip" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="baudrate_tol_ppm" type="int" is_array="false" format="decimal" desc="Maximum baud rate error of the expected signal" forceable="true" units="ppm" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timing_sample_threshold" type="int" is_array="false" format="decimal" desc="Start timing detection only if samples for timing detection are stronger than this threshold" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampmode_reg()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampmode_reg()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampmode_reg()</name>
                <name>CALC_Frame_Detect.calc_tsamplim_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampmode_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timing_detection_threshold" type="int" is_array="false" format="decimal" desc="Detect timing sequence if correlation value is larger than this threshold" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_timthresh_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_reg()</name>
                <name>CALC_Frame_Detect.calc_timthresh_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="symbols_in_timing_window" type="int" is_array="false" format="decimal" desc="Number of valid symbols to required to detect timing" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_timbases_reg()</name>
                <name>CALC_Frame_Detect.calc_timbases_reg()</name>
                <name>CALC_Frame_Detect.calc_timbases_reg()</name>
                <name>CALC_Frame_Detect.calc_timbases_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="errors_in_timing_window" type="int" is_array="false" format="decimal" desc="Number of symbols erros allowed in a timing window when detecting timing" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_preerrors_reg()</name>
                <name>CALC_Frame_Detect.calc_preerrors_reg()</name>
                <name>CALC_Frame_Detect.calc_preerrors_reg()</name>
                <name>CALC_Frame_Detect.calc_preerrors_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="number_of_timing_windows" type="int" is_array="false" format="decimal" desc="Number of timing windows to detect before searching for sync word" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_reg()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_reg()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_reg()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="sqi_threshold" type="int" is_array="false" format="decimal" desc="Signal Quality Indicator (SQI) threshold on correlation values to qualify a symbol as strong or weak" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_sqithresh_reg()</name>
                <name>CALC_Demodulator.calc_sqithresh_reg()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_sqithresh_val()</name>
            </access_write>
        </variable>
        <variable name="timing_resync_period" type="int" is_array="false" format="decimal" desc="Timing resynchronization period in multiples of symbols_in_timing_window " forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_rsyncper_reg()</name>
                <name>CALC_Demodulator.calc_rsyncper_reg()</name>
                <name>CALC_Demodulator.calc_rsyncper_reg()</name>
                <name>CALC_Demodulator.calc_rsyncper_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="agc_period" type="int" is_array="false" format="decimal" desc="AGC power measurement period" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agcperiod_reg()</name>
                <name>CALC_AGC.calc_agcperiod_reg()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_agcperiod_value()</name>
            </access_write>
        </variable>
        <variable name="frequency_offset_period" type="int" is_array="false" format="decimal" desc="Period used to estimate frequency offset in internal comp" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_freqoffestper_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="afc_period" type="int" is_array="false" format="decimal" desc="Period used to estimate frequency offset in AFC loop" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcavgper_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcavgper_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcavgper_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcavgper_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="agc_power_target" type="int" is_array="false" format="decimal" desc="Power target in dBm at channel filter output" forceable="true" units="dBm" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_pwrtarget_reg()</name>
                <name>CALC_AGC.calc_pwrtarget_reg()</name>
                <name>CALC_AGC.calc_pwrtarget_reg()</name>
                <name>CALC_AGC.calc_pwrtarget_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rssi_period" type="int" is_array="false" format="decimal" desc="RSSI calculation period" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_rssiperiod_reg()</name>
                <name>CALC_AGC.calc_rssiperiod_reg()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_rssiperiod_val()</name>
            </access_write>
        </variable>
        <variable name="agc_hysteresis" type="int" is_array="false" format="decimal" desc="Hysteresis level for AGC in dB" forceable="true" units="dB" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_hyst_reg()</name>
                <name>CALC_AGC.calc_hyst_reg()</name>
            </access_read>
            <access_write>
                <name>CALC_AGC.calc_hyst_val()</name>
            </access_write>
        </variable>
        <variable name="shaping_filter_param" type="float" is_array="false" format="decimal" desc="BT value for Gaussian  and roll-off factor for Raised Cosine pulse shaping filter." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ook_slicer_level" type="int" is_array="false" format="decimal" desc="Level to slice OOK symbols at as referenced from signal." forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Freq_Offset_Comp.calc_ook_slicer()</name>
            </access_write>
        </variable>
        <variable name="preamble_pattern" type="int" is_array="false" format="decimal" desc="Minimum repeated portion of the preamble such as binary 01 or 10. " forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_preamble_string()</name>
                <name>CALC_Frame_Detect.calc_preamble_string()</name>
                <name>CALC_Frame_Detect.calc_preamble_string()</name>
                <name>CALC_Frame_Detect.calc_preamble_string()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="preamble_pattern_len" type="int" is_array="false" format="decimal" desc="Length of the preamble pattern in bits. This will be set to 2 for a simple 01 or 10 preamble pattern." forceable="true" units="bits" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_base_reg()</name>
                <name>CALC_Frame_Detect.calc_basebits_reg()</name>
                <name>CALC_Frame_Detect.calc_base_reg()</name>
                <name>CALC_Frame_Detect.calc_basebits_reg()</name>
                <name>CALC_Frame_Detect.calc_base_reg()</name>
                <name>CALC_Frame_Detect.calc_basebits_reg()</name>
                <name>CALC_Frame_Detect.calc_base_reg()</name>
                <name>CALC_Frame_Detect.calc_basebits_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="preamble_length" type="int" is_array="false" format="decimal" desc="Total length of the preamble." forceable="true" units="bits" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_val()</name>
                <name>CALC_Frame_Detect.calc_timbases_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_comp_mode()</name>
                <name>CALC_Modulator.calc_txbases_reg()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_val()</name>
                <name>CALC_Frame_Detect.calc_timbases_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_comp_mode()</name>
                <name>CALC_Modulator.calc_txbases_reg()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_val()</name>
                <name>CALC_Frame_Detect.calc_timbases_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_comp_mode()</name>
                <name>CALC_Modulator.calc_txbases_reg()</name>
                <name>CALC_Diversity.calc_diversity_div_demod_reset_period_hemi_usec_value()</name>
                <name>CALC_Frame_Detect.calc_addtimseq_val()</name>
                <name>CALC_Frame_Detect.calc_timbases_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_comp_mode()</name>
                <name>CALC_Modulator.calc_txbases_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_0" type="int" is_array="false" format="hex" desc="Default sync word.  Stored with the last bit transmitted in the LSB." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_1" type="int" is_array="false" format="hex" desc="Alternative sync word for dual sync word cases.  Stored with the last bit transmitted in the LSB." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_length" type="int" is_array="false" format="decimal" desc="Length of the sync word in bits." forceable="true" units="bits" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_sync_words_reg()</name>
                <name>CALC_Frame_Detect.calc_syncbits_reg()</name>
                <name>CALC_Frame_Detect.calc_sync_words_reg()</name>
                <name>CALC_Frame_Detect.calc_syncbits_reg()</name>
                <name>CALC_Frame_Detect.calc_sync_words_reg()</name>
                <name>CALC_Frame_Detect.calc_syncbits_reg()</name>
                <name>CALC_Frame_Detect.calc_sync_words_reg()</name>
                <name>CALC_Frame_Detect.calc_syncbits_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_tx_skip" type="bool" is_array="false" format="decimal" desc="Sync Word TX Skip." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_syncword_tx_skip()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="asynchronous_rx_enable" type="bool" is_array="false" format="ascii" desc="Asynchronous RX mode enabled" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced>
                    <value>False</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_rxpinmode_reg()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="fsk_symbol_map" type="enum" is_array="false" format="decimal" desc="List of FSK symbol mappings" forceable="true" value_do_not_care="false">
            <enum name="FskSymbolMapEnum" desc="List of supported FSK symbol mappings">
                <members>
                    <member name="MAP0" value="0" desc="4FSK: 11, 10, 00, 01 in decreasing frequency, 2FSK: 1 high, 0 low frequency"/>
                    <member name="MAP1" value="1" desc="4FSK: 01, 00, 10, 11 in decreasing frequency, 2FSK: 0 high, 1 low frequency"/>
                    <member name="MAP2" value="2" desc="4FSK: 10, 11, 01, 00 in decreasing frequency, 2FSK: undefined"/>
                    <member name="MAP3" value="3" desc="4FSK: 00, 01, 11, 10 in decreasing frequency, 2FSK: undefined"/>
                    <member name="MAP4" value="4" desc="4FSK: 11, 01, 00, 10 in decreasing frequency, 2FSK: undefined"/>
                    <member name="MAP5" value="5" desc="4FSK: 10, 00, 01, 11 in decreasing frequency, 2FSK: undefined"/>
                    <member name="MAP6" value="6" desc="4FSK: 01, 11, 10, 00 in decreasing frequency, 2FSK: undefined"/>
                    <member name="MAP7" value="7" desc="4FSK: 00, 10, 11, 01 in decreasing frequency, 2FSK: undefined"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="diff_encoding_mode" type="enum" is_array="false" format="decimal" desc="Differential encoding mode options" forceable="true" value_do_not_care="false">
            <enum name="DiffEncModeEnum" desc="List of supported Differential Encoding Modes">
                <members>
                    <member name="DISABLED" value="0" desc="Differential encoding is disabled"/>
                    <member name="RR0" value="1" desc="Transmit the xor-ed value of the Raw symbol and the last Raw symbol. Initial Raw symbol is 0."/>
                    <member name="RE0" value="2" desc="Transmit the xor-ed value of the Raw symbol and the last Encoded symbol. Initial Encoded symbol is 0."/>
                    <member name="RR1" value="3" desc="Transmit the xor-ed value of the Raw symbol and the last Raw symbol. Initial Raw symbol is 1."/>
                    <member name="RE1" value="4" desc="Transmit the xor-ed value of the Raw symbol and the last Encoded symbol. Initial Encoded symbol is 1."/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_diffencmode_reg()</name>
                <name>CALC_Frame_Detect.calc_diffencmode_reg()</name>
                <name>CALC_Frame_Detect.calc_diffencmode_reg()</name>
                <name>CALC_Frame_Detect.calc_diffencmode_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frequency_comp_mode" type="enum" is_array="false" format="decimal" desc="Frequency compensation mode options" forceable="true" value_do_not_care="false">
            <enum name="FreqCompModeEnum" desc="TBD.">
                <members>
                    <member name="DISABLED" value="0" desc="Neither Frequency Offset Compensation (AFC) nor internal frequency compensation is enabled"/>
                    <member name="INTERNAL_LOCK_AT_PREAMBLE_DETECT" value="1" desc="Internal frequency compensation is enabled only freezing at PREAMBLE_DETECT"/>
                    <member name="INTERNAL_LOCK_AT_FRAME_DETECT" value="2" desc="Internal frequency compensation is enabled only freezing at FRAME_DETECT"/>
                    <member name="INTERNAL_ALWAYS_ON" value="3" desc="Internal frequency compensation is enabled only and is always on"/>
                    <member name="AFC_FREE_RUNNING" value="4" desc="Frequency Offset Compensation (AFC) is enabled only and is always on"/>
                    <member name="AFC_START_AT_PREAMBLE_FREE_RUNNING" value="5" desc="AFC is enabled only starting at PREAMBLE_DETECT"/>
                    <member name="AFC_LOCK_AT_TIMING_DETECT" value="6" desc="Frequency Offset Compensation (AFC) is enabled only freezing at TIMING_DETECT"/>
                    <member name="AFC_LOCK_AT_PREAMBLE_DETECT" value="7" desc="Frequency Offset Compensation (AFC) is enabled only freezing at PREAMBLE_DETECT"/>
                    <member name="AFC_LOCK_AT_FRAME_DETECT" value="8" desc="Frequency Offset Compensation (AFC) is enabled only freezing at FRAME_DETECT"/>
                    <member name="AFC_START_AT_PREAMBLE_LOCK_AT_FRAME_DETECT" value="9" desc="Frequency Offset Compensation (AFC) is enabled only starting at PREAMBLE_DETECT and freezing at FRAME_DETECT"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_period()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcadjlim()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcdel_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcrxmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcxclr_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_compmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_period()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcadjlim()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcdel_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcrxmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcxclr_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_compmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_period()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcadjlim()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcdel_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcrxmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcxclr_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_compmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_period()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcadjlim()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcdel_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcrxmode_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afcxclr_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_compmode_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CF_CFOSR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CF.CFOSR" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_cfosr_actual()</name>
                <name>CALC_Demodulator.calc_cfosr_actual()</name>
                <name>CALC_Demodulator.calc_cfosr_actual()</name>
                <name>CALC_Demodulator.calc_cfosr_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CF_DEC0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CF.DEC0" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec0_actual()</name>
                <name>CALC_Demodulator.calc_dec0_actual()</name>
                <name>CALC_Demodulator.calc_dec0_actual()</name>
                <name>CALC_Demodulator.calc_dec0_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CF_DEC1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CF.DEC1" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_actual()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_actual()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_actual()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CF_DEC1GAIN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CF.DEC1GAIN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec1gain_actual()</name>
                <name>CALC_Demodulator.calc_dec1gain_actual()</name>
                <name>CALC_Demodulator.calc_dec1gain_actual()</name>
                <name>CALC_Demodulator.calc_dec1gain_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CF_DEC2" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CF.DEC2" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_CODING" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.CODING" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Modulator.calc_symbol_encoding()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL0_DIFFENCMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.DIFFENCMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_DSSSDOUBLE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.DSSSDOUBLE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_DSSSLEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.DSSSLEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_DSSSSHIFTS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.DSSSSHIFTS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_actual()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_actual()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_actual()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_MAPFSK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.MAPFSK" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_MODFORMAT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.MODFORMAT" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_mod_type_actual()</name>
                <name>CALC_Demodulator.calc_mod_type_actual()</name>
                <name>CALC_Demodulator.calc_mod_type_actual()</name>
                <name>CALC_Demodulator.calc_mod_type_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_SHAPING" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.SHAPING" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Shaping.calc_shaping_filter_gain_actual()</name>
                <name>CALC_Shaping.calc_shaping_filter_gain_actual()</name>
                <name>CALC_Shaping.calc_shaping_filter_gain_actual()</name>
                <name>CALC_Shaping.calc_shaping_filter_gain_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_COMPMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.COMPMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_FREQOFFESTLIM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.FREQOFFESTLIM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_FREQOFFESTPER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.FREQOFFESTPER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_PHASEDEMOD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.PHASEDEMOD" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_RESYNCPER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.RESYNCPER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_resyncper_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_SYNCBITS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.SYNCBITS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_syncword_length_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_length_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_length_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_length_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL1_SYNCDATA" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.SYNCDATA" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame_Detect.calc_syncword_tx_skip()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL2_DATAFILTER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL2.DATAFILTER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL2_DEVWEIGHTDIS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL2.DEVWEIGHTDIS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL2_SQITHRESH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL2.SQITHRESH" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_sqithresh_reg()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL2_RXPINMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL2.RXPINMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Frame_Detect.calc_rxpinmode_reg()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL3_TSAMPDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL3.TSAMPDEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL3_TSAMPLIM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL3.TSAMPLIM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL3_TSAMPMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL3.TSAMPMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL4_DEVOFFCOMP" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL4.DEVOFFCOMP" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL4_ISICOMP" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL4.ISICOMP" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL4_OFFSETPHASEMASKING" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL4.OFFSETPHASEMASKING" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL5_BRCALAVG" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL5.BRCALAVG" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL5_BRCALEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL5.BRCALEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL5_TDEDGE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL5.TDEDGE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL5_TREDGE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL5.TREDGE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_MODINDEX_FREQGAINE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.MODINDEX.FREQGAINE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_MODINDEX_FREQGAINM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.MODINDEX.FREQGAINM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_freq_gain_actual()</name>
                <name>CALC_Demodulator.calc_freq_gain_actual()</name>
                <name>CALC_Demodulator.calc_freq_gain_actual()</name>
                <name>CALC_Demodulator.calc_freq_gain_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_MODINDEX_MODINDEXE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.MODINDEX.MODINDEXE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_MODINDEX_MODINDEXM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.MODINDEX.MODINDEXM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Modulator.calc_modindex_actual()</name>
                <name>CALC_Modulator.calc_modindex_actual()</name>
                <name>CALC_Modulator.calc_modindex_actual()</name>
                <name>CALC_Modulator.calc_modindex_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_PRE_BASE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.PRE.BASE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_PRE_BASEBITS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.PRE.BASEBITS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_basebits_actual()</name>
                <name>CALC_Frame_Detect.calc_basebits_actual()</name>
                <name>CALC_Frame_Detect.calc_basebits_actual()</name>
                <name>CALC_Frame_Detect.calc_basebits_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_PRE_PREERRORS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.PRE.PREERRORS" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_PRE_TXBASES" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.PRE.TXBASES" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_RXBR_RXBRDEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.RXBR.RXBRDEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_RXBR_RXBRINT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.RXBR.RXBRINT" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_rxbr_actual()</name>
                <name>CALC_Demodulator.calc_rxbr_actual()</name>
                <name>CALC_Demodulator.calc_rxbr_actual()</name>
                <name>CALC_Demodulator.calc_rxbr_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_RXBR_RXBRNUM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.RXBR.RXBRNUM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING0_COEFF0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING0.COEFF0" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING0_COEFF1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING0.COEFF1" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING0_COEFF2" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING0.COEFF2" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING0_COEFF3" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING0.COEFF3" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING1_COEFF4" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING1.COEFF4" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING1_COEFF5" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING1.COEFF5" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING1_COEFF6" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING1.COEFF6" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING1_COEFF7" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING1.COEFF7" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SHAPING2_COEFF8" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SHAPING2.COEFF8" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SYNC0_SYNC0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SYNC0.SYNC0" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_SYNC1_SYNC1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.SYNC1.SYNC1" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TIMING_ADDTIMSEQ" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.ADDTIMSEQ" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TIMING_FDM0THRESH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.FDM0THRESH" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TIMING_OFFSUBDEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.OFFSUBDEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TIMING_OFFSUBNUM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.OFFSUBNUM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TIMING_TIMINGBASES" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.TIMINGBASES" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_timbases_actual()</name>
                <name>CALC_Frame_Detect.calc_timbases_actual()</name>
                <name>CALC_Frame_Detect.calc_timbases_actual()</name>
                <name>CALC_Frame_Detect.calc_timbases_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TIMING_TIMTHRESH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.TIMTHRESH" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_timthresh_actual()</name>
                <name>CALC_Frame_Detect.calc_timthresh_actual()</name>
                <name>CALC_Frame_Detect.calc_timthresh_actual()</name>
                <name>CALC_Frame_Detect.calc_timthresh_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TXBR_TXBRDEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TXBR.TXBRDEN" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_TXBR_TXBRNUM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TXBR.TXBRNUM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_interpolation_gain_actual()</name>
                <name>CALC_Modulator.calc_txbr_actual()</name>
                <name>CALC_Demodulator.calc_interpolation_gain_actual()</name>
                <name>CALC_Modulator.calc_txbr_actual()</name>
                <name>CALC_Demodulator.calc_interpolation_gain_actual()</name>
                <name>CALC_Modulator.calc_txbr_actual()</name>
                <name>CALC_Demodulator.calc_interpolation_gain_actual()</name>
                <name>CALC_Modulator.calc_txbr_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_DSSS0_DSSS0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.DSSS0.DSSS0" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_dssslen_actual()</name>
                <name>CALC_Frame_Detect.calc_dssslen_actual()</name>
                <name>CALC_Frame_Detect.calc_dssslen_actual()</name>
                <name>CALC_Frame_Detect.calc_dssslen_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFCADJLIM_AFCADJLIM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFCADJLIM.AFCADJLIM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_adjlim_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_adjlim_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_adjlim_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_adjlim_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFC_AFCAVGPER" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCAVGPER" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFC_AFCDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCDEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFC_AFCRXCLR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCRXCLR" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFC_AFCRXMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCRXMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFC_AFCSCALEE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCSCALEE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_AFC_AFCSCALEM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCSCALEM" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SEQ_MISC_SQBMODETX" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SEQ.MISC.SQBMODETX" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="SEQ_MISC_DYNAMIC_SLICER_SW_EN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SEQ.MISC.DYNAMIC_SLICER_SW_EN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_dynamic_slicer_values()</name>
            </access_write>
        </variable>
        <variable name="base" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="basebits" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="if_frequency_hz" type="int" is_array="false" format="decimal" desc="Intermediate Frequency" forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cfosr" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_cfosr_reg()</name>
                <name>CALC_Demodulator.calc_cfosr_reg()</name>
                <name>CALC_Demodulator.calc_cfosr_reg()</name>
                <name>CALC_Demodulator.calc_cfosr_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec0" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec0_reg()</name>
                <name>CALC_Demodulator.calc_dec0_reg()</name>
                <name>CALC_Demodulator.calc_dec0_reg()</name>
                <name>CALC_Demodulator.calc_dec0_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec1" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_reg()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_reg()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_reg()</name>
                <name>CALC_Demodulator.calc_dec1_dec2_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec1gain" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec1gain_reg()</name>
                <name>CALC_Demodulator.calc_dec1gain_reg()</name>
                <name>CALC_Demodulator.calc_dec1gain_reg()</name>
                <name>CALC_Demodulator.calc_dec1gain_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec2" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="freq_gain" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_freq_gain_reg()</name>
                <name>CALC_Demodulator.calc_freq_gain_reg()</name>
                <name>CALC_Demodulator.calc_freq_gain_reg()</name>
                <name>CALC_Demodulator.calc_freq_gain_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="iffilt_ratio" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Radio.calc_iffilt_ratio_reg()</name>
                <name>CALC_Radio.calc_iffilt_ratio_reg()</name>
                <name>CALC_Radio.calc_iffilt_ratio_reg()</name>
                <name>CALC_Radio.calc_iffilt_ratio_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="lodiv" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="modindex" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Modulator.calc_modindex_field()</name>
                <name>CALC_Modulator.calc_modindex_field()</name>
                <name>CALC_Modulator.calc_modindex_field()</name>
                <name>CALC_Modulator.calc_modindex_field()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrden" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrfrac" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrint" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrnum" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timingbases" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="txbr_ratio" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Modulator.calc_txbr_reg()</name>
                <name>CALC_Modulator.calc_txbr_reg()</name>
                <name>CALC_Modulator.calc_txbr_reg()</name>
                <name>CALC_Modulator.calc_txbr_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="bandwidth_carson_hz" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="bandwidth_hz" type="int" is_array="false" format="decimal" desc="overwrites the auto-calculated RX filter bandwidth for the receiver. " forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="freq_gain_scale" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_devweightdis_reg()</name>
                <name>CALC_Demodulator.calc_devweightdis_reg()</name>
                <name>CALC_Demodulator.calc_devweightdis_reg()</name>
                <name>CALC_Demodulator.calc_devweightdis_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="freq_offset_hz" type="int" is_array="false" format="decimal" desc="Frequency limit beyond which no AFC cancelation / frequency offset compensation occurs" forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="modulation_index" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="fdm0_thresh" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="brcalavg" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_brcal_reg()</name>
                <name>CALC_Demodulator.calc_brcal_reg()</name>
                <name>CALC_Demodulator.calc_brcal_reg()</name>
                <name>CALC_Demodulator.calc_brcal_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="brcalen" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="baudrate" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_bw_carson()</name>
                <name>CALC_Demodulator.calc_d0_d1_d2_cfosr_rxbr_value()</name>
                <name>CALC_Demodulator.calc_rxbr_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampdel_val()</name>
                <name>CALC_Radio.calc_lpfbwrx()</name>
                <name>CALC_Utilities.calc_error_check()</name>
                <name>CALC_Utilities.calc_modulation_index()</name>
                <name>CALC_Demodulator.calc_bw_carson()</name>
                <name>CALC_Demodulator.calc_d0_d1_d2_cfosr_rxbr_value()</name>
                <name>CALC_Demodulator.calc_rxbr_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampdel_val()</name>
                <name>CALC_Radio.calc_lpfbwrx()</name>
                <name>CALC_Utilities.calc_error_check()</name>
                <name>CALC_Utilities.calc_modulation_index()</name>
                <name>CALC_Demodulator.calc_bw_carson()</name>
                <name>CALC_Demodulator.calc_d0_d1_d2_cfosr_rxbr_value()</name>
                <name>CALC_Demodulator.calc_rxbr_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampdel_val()</name>
                <name>CALC_Radio.calc_lpfbwrx()</name>
                <name>CALC_Utilities.calc_error_check()</name>
                <name>CALC_Utilities.calc_modulation_index()</name>
                <name>CALC_Demodulator.calc_bw_carson()</name>
                <name>CALC_Demodulator.calc_d0_d1_d2_cfosr_rxbr_value()</name>
                <name>CALC_Demodulator.calc_rxbr_reg()</name>
                <name>CALC_Frame_Detect.calc_tsampdel_val()</name>
                <name>CALC_Radio.calc_lpfbwrx()</name>
                <name>CALC_Utilities.calc_error_check()</name>
                <name>CALC_Utilities.calc_modulation_index()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="sensitivity" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_bits_per_symbol" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
                <name>CALC_FEC.calc_convdecodemode_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_shifts" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_reg()</name>
                <name>CALC_Frame_Detect.calc_dsssshifts_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_baudrate_offset_hz" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_bitrate_offset_hz" type="int" is_array="false" format="decimal" desc="Nominal Rx bit rate offset wrt the value set in entry field Bitrate" forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Demodulator.calc_rx_bitrate_offset_hz()</name>
            </access_write>
        </variable>
        <variable name="afc_scale" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_reg()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="freq_offset_scale" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_frequency_offset_factor_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_frequency_offset_factor_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_frequency_offset_factor_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_frequency_offset_factor_value()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frequency_offset_factor" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="frequency_offset_factor_fxp" type="int" is_array="false" format="hex" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dynamic_slicer_enabled" type="bool" is_array="false" format="ascii" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>False</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Misc.calc_dynamic_slicer_values()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_dynamic_slicer_sw_en()</name>
            </access_write>
        </variable>
        <variable name="dynamic_slicer_threshold_values" type="int" is_array="true" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dynamic_slicer_level_values" type="int" is_array="true" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ook_ebno" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>21.5</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Utilities.calc_ook_ebno()</name>
            </access_write>
        </variable>
        <variable name="base_frequency_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_IrCal.calc_ircal_auxpll_dividers()</name>
                <name>CALC_IrCal.calc_ircal_determine_best_config()</name>
                <name>CALC_IrCal.calc_ircal_auxpll_dividers()</name>
                <name>CALC_IrCal.calc_ircal_determine_best_config()</name>
                <name>CALC_IrCal.calc_ircal_auxpll_dividers()</name>
                <name>CALC_IrCal.calc_ircal_determine_best_config()</name>
                <name>CALC_IrCal.calc_ircal_auxpll_dividers()</name>
                <name>CALC_IrCal.calc_ircal_determine_best_config()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="bandwidth_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_dec1gain_value()</name>
                <name>CALC_Radio.calc_iffilt_bw_reg()</name>
                <name>CALC_Radio.calc_lpfbwtx()</name>
                <name>CALC_Radio.calc_realmode_reg()</name>
                <name>CALC_Demodulator.calc_dec1gain_value()</name>
                <name>CALC_Radio.calc_iffilt_bw_reg()</name>
                <name>CALC_Radio.calc_lpfbwtx()</name>
                <name>CALC_Radio.calc_realmode_reg()</name>
                <name>CALC_Demodulator.calc_dec1gain_value()</name>
                <name>CALC_Radio.calc_iffilt_bw_reg()</name>
                <name>CALC_Radio.calc_lpfbwtx()</name>
                <name>CALC_Radio.calc_realmode_reg()</name>
                <name>CALC_Demodulator.calc_dec1gain_value()</name>
                <name>CALC_Radio.calc_iffilt_bw_reg()</name>
                <name>CALC_Radio.calc_lpfbwtx()</name>
                <name>CALC_Radio.calc_realmode_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="syncword_length_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_syncword_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_string()</name>
                <name>CALC_Frame_Detect.calc_syncword_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_string()</name>
                <name>CALC_Frame_Detect.calc_syncword_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_string()</name>
                <name>CALC_Frame_Detect.calc_syncword_actual()</name>
                <name>CALC_Frame_Detect.calc_syncword_string()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="preamble_pattern_len_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_len_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_preerrors_val()</name>
                <name>CALC_Frame_Detect.calc_preerrors_val()</name>
                <name>CALC_Frame_Detect.calc_preerrors_val()</name>
                <name>CALC_Frame_Detect.calc_preerrors_val()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dsss_shifts_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="baudrate_tol_ppm_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="if_frequency_hz_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Radio.calc_iffilt_ratio_value()</name>
                <name>CALC_Radio.calc_iffilt_ratio_value()</name>
                <name>CALC_Radio.calc_iffilt_ratio_value()</name>
                <name>CALC_Radio.calc_iffilt_ratio_value()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="cfosr_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec0_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agc_settling_delay()</name>
                <name>CALC_Demodulator.calc_src1_denominator()</name>
                <name>CALC_Synth.calc_iffreq_reg()</name>
                <name>CALC_AGC.calc_agc_settling_delay()</name>
                <name>CALC_Demodulator.calc_src1_denominator()</name>
                <name>CALC_Synth.calc_iffreq_reg()</name>
                <name>CALC_AGC.calc_agc_settling_delay()</name>
                <name>CALC_Demodulator.calc_src1_denominator()</name>
                <name>CALC_Synth.calc_iffreq_reg()</name>
                <name>CALC_AGC.calc_agc_settling_delay()</name>
                <name>CALC_Demodulator.calc_src1_denominator()</name>
                <name>CALC_Synth.calc_iffreq_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec1_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec1gain_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="dec2_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="freq_gain_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="iffilt_bandwidth_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="interpolation_gain_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="lodiv_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_IrCal.calc_ircal_valid_methods()</name>
                <name>CALC_Radio.calc_bandsel_reg()</name>
                <name>CALC_Synth.calc_tuning_range_limits()</name>
                <name>CALC_IrCal.calc_ircal_valid_methods()</name>
                <name>CALC_Radio.calc_bandsel_reg()</name>
                <name>CALC_Synth.calc_tuning_range_limits()</name>
                <name>CALC_IrCal.calc_ircal_valid_methods()</name>
                <name>CALC_Radio.calc_bandsel_reg()</name>
                <name>CALC_Synth.calc_tuning_range_limits()</name>
                <name>CALC_IrCal.calc_ircal_valid_methods()</name>
                <name>CALC_Radio.calc_bandsel_reg()</name>
                <name>CALC_Synth.calc_tuning_range_limits()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="mod_format_actual" type="string" is_array="false" format="ascii" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="modindex_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="oversampling_rate_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_src2_denominator()</name>
                <name>CALC_Demodulator.calc_src2_denominator()</name>
                <name>CALC_Demodulator.calc_src2_denominator()</name>
                <name>CALC_Demodulator.calc_src2_denominator()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_baud_rate_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_deviation_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_synth_freq_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrden_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrfrac_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_reg()</name>
                <name>CALC_Utilities.calc_oversampling_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_reg()</name>
                <name>CALC_Utilities.calc_oversampling_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_reg()</name>
                <name>CALC_Utilities.calc_oversampling_val()</name>
                <name>CALC_Freq_Offset_Comp.calc_offsub_reg()</name>
                <name>CALC_Utilities.calc_oversampling_val()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrint_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rxbrnum_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="shaping_filter_gain_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="synth_res_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timingbases_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Frame_Detect.calc_timingwindow_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_val()</name>
                <name>CALC_Frame_Detect.calc_timingwindow_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_val()</name>
                <name>CALC_Frame_Detect.calc_timingwindow_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_val()</name>
                <name>CALC_Frame_Detect.calc_timingwindow_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_fdm0thresh_val()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timthresh_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tx_baud_rate_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Modulator.calc_modulation_index_actual()</name>
                <name>CALC_Modulator.calc_modulation_index_actual()</name>
                <name>CALC_Modulator.calc_modulation_index_actual()</name>
                <name>CALC_Modulator.calc_modulation_index_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="baud_per_symbol_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
            </access_write>
        </variable>
        <variable name="bits_per_symbol_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tx_deviation_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tx_synth_freq_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_check_synth_limits()</name>
                <name>CALC_Synth.calc_check_synth_limits()</name>
                <name>CALC_Synth.calc_check_synth_limits()</name>
                <name>CALC_Synth.calc_check_synth_limits()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="txbr_ratio_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="iffilt_ratio_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="modulation_index_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timing_window_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Demodulator.calc_baudrate_tol_ppm_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_brcal_val()</name>
                <name>CALC_Demodulator.calc_baudrate_tol_ppm_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_brcal_val()</name>
                <name>CALC_Demodulator.calc_baudrate_tol_ppm_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_brcal_val()</name>
                <name>CALC_Demodulator.calc_baudrate_tol_ppm_actual()</name>
                <name>CALC_Demodulator.calc_resyncper_brcal_val()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="resyncper_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="afc_scale_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="offsub_ratio_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="afc_limit_hz_actual" type="float" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_auxndiv" type="int" is_array="false" format="decimal" desc="This value is predetermined." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_auxlodiv" type="int" is_array="false" format="decimal" desc="This value is predetermined." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_rampval" type="int" is_array="false" format="decimal" desc="This value is predetermined." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>6</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_IrCal.calc_ircal_common_values()</name>
            </access_write>
        </variable>
        <variable name="ircal_rxamppll" type="int" is_array="false" format="decimal" desc="This value is predetermined." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>4</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_IrCal.calc_ircal_common_values()</name>
            </access_write>
        </variable>
        <variable name="ircal_rxamppa" type="int" is_array="false" format="decimal" desc="This value is predetermined." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated>
                    <value>16</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_IrCal.calc_ircal_common_values()</name>
            </access_write>
        </variable>
        <variable name="ircal_manufconfigvalid" type="bool" is_array="false" format="ascii" desc="True = the manufacturing calibration value is saved on the chip" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_pllconfigvalid" type="bool" is_array="false" format="ascii" desc="True = PLL loopback is permitted to generate a calibration value" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_paconfigvalid" type="bool" is_array="false" format="ascii" desc="True = PA loopback is permitted to generate a calibration value" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_bestconfig" type="enum" is_array="false" format="decimal" desc="Specify the best calibration method for this radio configuration." forceable="true" value_do_not_care="false">
            <enum name="configType" desc="Specify how image rejection calibration is to run.">
                <members>
                    <member name="MANUFACTURING" value="1" desc="Use the calibration value saved during manufacturing, if applicable."/>
                    <member name="PLL" value="2" desc="Put the part into a PLL loopback to generate a calibration value."/>
                    <member name="PA" value="3" desc="Put the part into a PA loopback to generate a calibration value."/>
                    <member name="UNSUPPORTED" value="4" desc="Image rejection calibration not supported."/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_useswrssiaveraging" type="bool" is_array="false" format="ascii" desc="True = use software RSSI averaging; False = use hardware RSSI averaging" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_numrssitoavg" type="int" is_array="false" format="decimal" desc="Number of RSSI values (2^value) to average in software. If value = 3, 8 values will be averaged." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_throwawaybeforerssi" type="int" is_array="false" format="decimal" desc="Number of RSSI values to discard before starting to average RSSI values." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_delayusbeforerssi" type="int" is_array="false" format="decimal" desc="Microsecond delay between applying a calibration value and then reading RSSI values." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_delayusbetweenswrssi" type="int" is_array="false" format="decimal" desc="Microsecond delay between gathering RSSI values. Software RSSI averaging mode only." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_agcrssiperiod" type="int" is_array="false" format="decimal" desc="Number of raw RSSI values averaged by hardware." forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_useswrssiaveraging2" type="bool" is_array="false" format="ascii" desc="True = use software RSSI averaging; False = use hardware RSSI averaging; Jumbo support" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_numrssitoavg2" type="int" is_array="false" format="decimal" desc="Number of RSSI values (2^value) to average in software. If value = 3, 8 values will be averaged. Jumbo support" forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_throwawaybeforerssi2" type="int" is_array="false" format="decimal" desc="Number of RSSI values to discard before starting to average RSSI values. Jumbo support" forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_delayusbeforerssi2" type="int" is_array="false" format="decimal" desc="Microsecond delay between applying a calibration value and then reading RSSI values. Jumbo support" forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_delayusbetweenswrssi2" type="int" is_array="false" format="decimal" desc="Microsecond delay between gathering RSSI values. Software RSSI averaging mode only. Jumbo support" forceable="true" units="bytes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_rxtx_path_common" type="enum" is_array="false" format="decimal" desc="RX and TX are on a common/shared circuit, or split. Refer to document AN971." forceable="true" value_do_not_care="false">
            <enum name="IRCalRXTXPathCommonEnum" desc="RX and TX are on a common/shared circuit, or split. Refer to document AN971.">
                <members>
                    <member name="SHARED_RX_TX_PATH" value="0" desc="RX and TX circuit paths are common/shared/connected"/>
                    <member name="SPLIT_RX_TX_PATH" value="1" desc="RX and TX circuit paths are separated/not connected"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="ircal_power_level" type="int" is_array="false" format="decimal" desc="Specify IR cal power level (amplitude) instead of auto (0). Refer to document AN971." forceable="true" units="codes" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="mbus_mode" type="enum" is_array="false" format="decimal" desc="List of supported Mbus Modes" forceable="true" value_do_not_care="false">
            <enum name="MbusModeEnum" desc="List of supported Mbus modoes">
                <members>
                    <member name="ModeC_M2O_100k" value="0" desc="Mode C Meter to Other, 100kbps"/>
                    <member name="ModeC_O2M_50k" value="1" desc="Mode C Other to Meter, 50kbps"/>
                    <member name="ModeF_2p4k" value="2" desc="Mode F, 2.4kbps"/>
                    <member name="ModeNg" value="3" desc="Mode Ng"/>
                    <member name="ModeN1a_4p8K" value="4" desc="Mode N1a, 4.8kbps"/>
                    <member name="ModeN1c_2p4K" value="5" desc="Mode N1c, 2.4kbps"/>
                    <member name="ModeR_4p8k" value="6" desc="Mode R, 2.8kbps"/>
                    <member name="ModeT_M2O_100k" value="7" desc="Mode T, Meter to Other, 100kbps"/>
                    <member name="ModeT_O2M_32p768k" value="8" desc="Mode T, Other to Meter, 100kbps"/>
                    <member name="ModeS_32p768k" value="9" desc="Mode S, 32.768kbps"/>
                    <member name="ModeN_6p4k" value="10" desc="Mode N, 6.4kbps"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="mbus_frame_format" type="enum" is_array="false" format="decimal" desc="List of supported Mbus Frame Format Configurations" forceable="true" value_do_not_care="false">
            <enum name="MbusFrameFormatEnum" desc="List of supported Mbus frame formats">
                <members>
                    <member name="NoFormat" value="0" desc="No frame formatting"/>
                    <member name="FrameA" value="1" desc="Mbus Format A "/>
                    <member name="FrameB" value="2" desc="Mbus Format B"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="mbus_symbol_encoding" type="enum" is_array="false" format="decimal" desc="List of supported Mbus Symbol Encoding Configurations" forceable="true" value_do_not_care="false">
            <enum name="MbusFrameFormatEnum" desc="List of supported Mbus frame formats">
                <members>
                    <member name="NRZ" value="0" desc="NRZ"/>
                    <member name="Manchester" value="1" desc="Manchester"/>
                    <member name="MBUS_3OF6" value="2" desc="3 of 6"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="MODEM_CTRL0_FRAMEDETDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL0.FRAMEDETDEL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL1_SYNC1INV" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.SYNC1INV" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL1_SYNCERRORS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL1.SYNCERRORS" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL2_BRDIVA" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL2.BRDIVA" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL2_BRDIVB" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL2.BRDIVB" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL4_ADCSATDENS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL4.ADCSATDENS" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL4_ADCSATLEVEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL4.ADCSATLEVEL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>6</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL5_BRCALMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL5.BRCALMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_CTRL5_DETDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.CTRL5.DETDEL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_PRE_DSSSPRE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.PRE.DSSSPRE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_TIMING_FASTRESYNC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.FASTRESYNC" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_TIMING_TIMSEQSYNC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.TIMSEQSYNC" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_TIMING_TSAGCDEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.TIMING.TSAGCDEL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="MODEM_AFC_AFCTXMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.AFC.AFCTXMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Misc.calc_misc()</name>
            </access_write>
        </variable>
        <variable name="in_2fsk_opt_scope" type="bool" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="symbol_encoding" type="enum" is_array="false" format="decimal" desc="Symbol Encoding Options" forceable="true" value_do_not_care="false">
            <enum name="SymbolEncodingEnum" desc="List of supported symbol encoding options">
                <members>
                    <member name="NRZ" value="0" desc="Non Return Zero Coding"/>
                    <member name="Manchester" value="1" desc="Manchester Coding"/>
                    <member name="DSSS" value="2" desc="Direct Sequence Spread Spectrum Coding"/>
                    <member name="LINECODE" value="3" desc="Maps 0 to 0011 symbol and 1 to 1100 symbol"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>SymbolEncodingEnum.NRZ</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Modulator.calc_symbol_encoding()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
                <name>CALC_Modulator.calc_symbol_rates_actual()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="manchester_mapping" type="enum" is_array="false" format="decimal" desc="Manchester Code Mapping Options for packet payload" forceable="true" value_do_not_care="false">
            <enum name="ManchesterMappingEnum" desc="List of supported Manchester Code options">
                <members>
                    <member name="Default" value="0" desc="0-bit corresponds to a 0 to 1 transition and 1-bit corresponds to 1 to 0 transition"/>
                    <member name="Inverted" value="1" desc="0-bit corresponds to a 1 to 0 transition and 1-bit corresponds to 0 to 1 transition"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>ManchesterMappingEnum.Default</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="base_frequency" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_lodiv_value()</name>
                <name>CALC_Synth.calc_lodiv_value()</name>
                <name>CALC_Synth.calc_lodiv_value()</name>
                <name>CALC_Synth.calc_lodiv_value()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="xtal_frequency" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agc_clock_cycle()</name>
                <name>CALC_Demodulator.calc_bandwidth_actual()</name>
                <name>CALC_Demodulator.calc_fxo_or_fdec8()</name>
                <name>CALC_Demodulator.calc_if_frequency_actual()</name>
                <name>CALC_Demodulator.calc_rx_baud_rate_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset_scale_value()</name>
                <name>CALC_Modulator.calc_modindex_value()</name>
                <name>CALC_Modulator.calc_tx_baud_rate_actual()</name>
                <name>CALC_Modulator.calc_txbr_value()</name>
                <name>CALC_Synth.calc_synth_res_actual()</name>
                <name>CALC_AGC.calc_agc_clock_cycle()</name>
                <name>CALC_Demodulator.calc_bandwidth_actual()</name>
                <name>CALC_Demodulator.calc_fxo_or_fdec8()</name>
                <name>CALC_Demodulator.calc_if_frequency_actual()</name>
                <name>CALC_Demodulator.calc_rx_baud_rate_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset_scale_value()</name>
                <name>CALC_Modulator.calc_modindex_value()</name>
                <name>CALC_Modulator.calc_tx_baud_rate_actual()</name>
                <name>CALC_Modulator.calc_txbr_value()</name>
                <name>CALC_Synth.calc_synth_res_actual()</name>
                <name>CALC_AGC.calc_agc_clock_cycle()</name>
                <name>CALC_Demodulator.calc_bandwidth_actual()</name>
                <name>CALC_Demodulator.calc_fxo_or_fdec8()</name>
                <name>CALC_Demodulator.calc_if_frequency_actual()</name>
                <name>CALC_Demodulator.calc_rx_baud_rate_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset_scale_value()</name>
                <name>CALC_Modulator.calc_modindex_value()</name>
                <name>CALC_Modulator.calc_tx_baud_rate_actual()</name>
                <name>CALC_Modulator.calc_txbr_value()</name>
                <name>CALC_Synth.calc_synth_res_actual()</name>
                <name>CALC_AGC.calc_agc_clock_cycle()</name>
                <name>CALC_Demodulator.calc_bandwidth_actual()</name>
                <name>CALC_Demodulator.calc_fxo_or_fdec8()</name>
                <name>CALC_Demodulator.calc_if_frequency_actual()</name>
                <name>CALC_Demodulator.calc_rx_baud_rate_actual()</name>
                <name>CALC_Freq_Offset_Comp.calc_afc_scale_value()</name>
                <name>CALC_Freq_Offset_Comp.calc_freq_offset_scale_value()</name>
                <name>CALC_Modulator.calc_modindex_value()</name>
                <name>CALC_Modulator.calc_tx_baud_rate_actual()</name>
                <name>CALC_Modulator.calc_txbr_value()</name>
                <name>CALC_Synth.calc_synth_res_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="channel_spacing" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_chsp_freq_reg()</name>
                <name>CALC_Synth.calc_chsp_freq_reg()</name>
                <name>CALC_Synth.calc_chsp_freq_reg()</name>
                <name>CALC_Synth.calc_chsp_freq_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_IFPGACTRL_BANDSEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.BANDSEL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_IFPGACTRL_VLDO" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.VLDO" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_CASCBIAS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.CASCBIAS" value_do_not_care="false">
            <values>
                <calculated>
                    <value>7</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_TRIMVCASLDO" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.TRIMVCASLDO" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_TRIMVCM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.TRIMVCM" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_TRIMVREFLDO" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.TRIMVREFLDO" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_TRIMVREGMIN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.TRIMVREGMIN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_ENHYST" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.ENHYST" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFPGACTRL_ENOFFD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFPGACTRL.ENOFFD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifpgactrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_REALMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.REALMODE" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_IFADCCTRL_VLDOCLKGEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.VLDOCLKGEN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_REGENCLKDELAY" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.REGENCLKDELAY" value_do_not_care="false">
            <values>
                <calculated>
                    <value>4</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_INPUTSCALE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.INPUTSCALE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_OTA1CURRENT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.OTA1CURRENT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_OTA2CURRENT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.OTA2CURRENT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_OTA3CURRENT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.OTA3CURRENT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_VCM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.VCM" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_VLDOSERIES" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.VLDOSERIES" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_VLDOSERIESCURR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.VLDOSERIESCURR" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_VLDOSHUNT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.VLDOSHUNT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFADCCTRL_INVERTCLK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFADCCTRL.INVERTCLK" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_ifadcctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFFILTCTRL_BANDWIDTH" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFFILTCTRL.BANDWIDTH" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Radio.calc_iffilt_bw_actual()</name>
                <name>CALC_Radio.calc_iffilt_bw_actual()</name>
                <name>CALC_Radio.calc_iffilt_bw_actual()</name>
                <name>CALC_Radio.calc_iffilt_bw_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_IFFILTCTRL_CENTFREQ" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFFILTCTRL.CENTFREQ" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Radio.calc_iffilt_ratio_actual()</name>
                <name>CALC_Radio.calc_iffilt_ratio_actual()</name>
                <name>CALC_Radio.calc_iffilt_ratio_actual()</name>
                <name>CALC_Radio.calc_iffilt_ratio_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_IFFILTCTRL_VCM" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFFILTCTRL.VCM" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_iffiltctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_IFFILTCTRL_VREG" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.IFFILTCTRL.VREG" value_do_not_care="false">
            <values>
                <calculated>
                    <value>4</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_iffiltctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_RFENCTRL_DEMEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.RFENCTRL.DEMEN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_demen()</name>
            </access_write>
        </variable>
        <variable name="RAC_RFENCTRL_IFADCCAPRESET" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.RFENCTRL.IFADCCAPRESET" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_analog_misc()</name>
            </access_write>
        </variable>
        <variable name="pll_bandwidth_rx" type="enum" is_array="false" format="decimal" desc="PLL bandwidth in KHz in RX" forceable="true" value_do_not_care="false">
            <enum name="PLLBandwdithEnum" desc="List of supported PLL bandwidth settings">
                <members>
                    <member name="BW_250KHz" value="0" desc="PLL loop filter bandwidth is approximately 250 KHz"/>
                    <member name="BW_297KHz" value="1" desc="PLL loop filter bandwidth is approximately 297 KHz"/>
                    <member name="BW_354KHz" value="2" desc="PLL loop filter bandwidth is approximately 354 KHz"/>
                    <member name="BW_420KHz" value="3" desc="PLL loop filter bandwidth is approximately 420 KHz"/>
                    <member name="BW_500KHz" value="6" desc="PLL loop filter bandwidth is approximately 500 KHz"/>
                    <member name="BW_594KHz" value="7" desc="PLL loop filter bandwidth is approximately 594 KHz"/>
                    <member name="BW_1260KHz" value="8" desc="PLL loop filter bandwidth is approximately 1260 KHz"/>
                    <member name="BW_1500KHz" value="9" desc="PLL loop filter bandwidth is approximately 1500 KHz"/>
                    <member name="BW_1780KHz" value="10" desc="PLL loop filter bandwidth is approximately 1780 KHz"/>
                    <member name="BW_2120KHz" value="11" desc="PLL loop filter bandwidth is approximately 2120 KHz"/>
                    <member name="BW_2520KHz" value="14" desc="PLL loop filter bandwidth is approximately 2520 KHz"/>
                    <member name="BW_3000KHz" value="15" desc="PLL loop filter bandwidth is approximately 3000 KHz"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="pll_bandwidth_tx" type="enum" is_array="false" format="decimal" desc="PLL bandwidth in KHz in TX" forceable="true" value_do_not_care="false">
            <enum name="PLLBandwdithEnum" desc="List of supported PLL bandwidth settings">
                <members>
                    <member name="BW_250KHz" value="0" desc="PLL loop filter bandwidth is approximately 250 KHz"/>
                    <member name="BW_297KHz" value="1" desc="PLL loop filter bandwidth is approximately 297 KHz"/>
                    <member name="BW_354KHz" value="2" desc="PLL loop filter bandwidth is approximately 354 KHz"/>
                    <member name="BW_420KHz" value="3" desc="PLL loop filter bandwidth is approximately 420 KHz"/>
                    <member name="BW_500KHz" value="6" desc="PLL loop filter bandwidth is approximately 500 KHz"/>
                    <member name="BW_594KHz" value="7" desc="PLL loop filter bandwidth is approximately 594 KHz"/>
                    <member name="BW_1260KHz" value="8" desc="PLL loop filter bandwidth is approximately 1260 KHz"/>
                    <member name="BW_1500KHz" value="9" desc="PLL loop filter bandwidth is approximately 1500 KHz"/>
                    <member name="BW_1780KHz" value="10" desc="PLL loop filter bandwidth is approximately 1780 KHz"/>
                    <member name="BW_2120KHz" value="11" desc="PLL loop filter bandwidth is approximately 2120 KHz"/>
                    <member name="BW_2520KHz" value="14" desc="PLL loop filter bandwidth is approximately 2520 KHz"/>
                    <member name="BW_3000KHz" value="15" desc="PLL loop filter bandwidth is approximately 3000 KHz"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Radio.calc_reg_lpfbwtx_lpfbwrx()</name>
                <name>CALC_Radio.calc_reg_lpfbwtx_lpfbwrx()</name>
                <name>CALC_Radio.calc_reg_lpfbwtx_lpfbwrx()</name>
                <name>CALC_Radio.calc_reg_lpfbwtx_lpfbwrx()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="pll_bandwidth_miracle_mode" type="bool" is_array="false" format="ascii" desc="Set to force the synth pll into miracle mode (whatever that means)." forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SEQ_SYNTHLPFCTRLRX_SYNTHLPFCTRLRX" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SEQ.SYNTHLPFCTRLRX.SYNTHLPFCTRLRX" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SEQ_SYNTHLPFCTRLTX_SYNTHLPFCTRLTX" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SEQ.SYNTHLPFCTRLTX.SYNTHLPFCTRLTX" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_TRIMAUXPLLCLK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.TRIMAUXPLLCLK" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_TRIMTRSWGATEV" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.TRIMTRSWGATEV" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_TRIMVCASLDO" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.TRIMVCASLDO" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_TRIMVREFLDO" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.TRIMVREFLDO" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_TRIMVREGMIN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.TRIMVREGMIN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_TRIMAUXBIAS" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.TRIMAUXBIAS" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_LNAMIXCTRL1_ENBIASCAL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.LNAMIXCTRL1.ENBIASCAL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_lnamixctrl1()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCOAMPLITUDE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCOAMPLITUDE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>10</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCODETAMPLITUDE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCODETAMPLITUDE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>7</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCODETEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCODETEN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCODETMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCODETMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCOAREGCURR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCOAREGCURR" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCOCREGCURR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCOCREGCURR" value_do_not_care="false">
            <values>
                <calculated>
                    <value>2</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="RAC_VCOCTRL_VCODIVCURR" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="RAC.VCOCTRL.VCODIVCURR" value_do_not_care="false">
            <values>
                <calculated>
                    <value>15</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_vcoctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_DITHERDSMOUTPUT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.DITHERDSMOUTPUT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>7</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_DITHERDAC" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.DITHERDAC" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_DITHERDSMINPUT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.DITHERDSMINPUT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_DSMMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.DSMMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_LSBFORCE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.LSBFORCE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_LOCKTHRESHOLD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.LOCKTHRESHOLD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>3</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_AUXLOCKTHRESHOLD" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.AUXLOCKTHRESHOLD" value_do_not_care="false">
            <values>
                <calculated>
                    <value>5</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_PRSMUX0" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.PRSMUX0" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CTRL_PRSMUX1" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CTRL.PRSMUX1" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Radio.calc_reg_synthctrl()</name>
            </access_write>
        </variable>
        <variable name="shaping_filter" type="enum" is_array="false" format="decimal" desc="Defines the shaping filter to be used in the TX side." forceable="true" value_do_not_care="false">
            <enum name="ShapingFilterEnum" desc="Defines the shaping filter to be used in the TX side.">
                <members>
                    <member name="NONE" value="0" desc="No shaping filter is applied"/>
                    <member name="Gaussian" value="1" desc="Gaussian shaping filter - BT is defined at entry field Shaping Filter Parameter"/>
                    <member name="Raised_Cosine" value="2" desc="Raised Cosine shaping filter - R is defined at entry field Shaping Filter Parameter"/>
                    <member name="Root_Raised_Cosine" value="3" desc="Filter for 802.15.4 250 kbps DSSS OQPSK PHY"/>
                    <member name="Custom_OQPSK" value="4" desc="Filter for 802.15.4 250 kbps DSSS OQPSK PHY"/>
                    <member name="Custom_PSK" value="5" desc="Legacy 3rd party MSK filter"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Shaping.calc_shaping_reg()</name>
                <name>CALC_Shaping.calc_shaping_reg()</name>
                <name>CALC_Shaping.calc_shaping_reg()</name>
                <name>CALC_Shaping.calc_shaping_reg()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="channel_spacing_hz" type="int" is_array="false" format="decimal" desc="Channel raster used for relative frequency configuration" forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="channel_spacing_actual" type="int" is_array="false" format="decimal" desc="" forceable="false" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SYNTH_CALOFFSET_CALOFFSET" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CALOFFSET.CALOFFSET" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Synth.calc_synth_misc()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CHCTRL_CHNO" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CHCTRL.CHNO" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Synth.calc_synth_misc()</name>
            </access_write>
        </variable>
        <variable name="SYNTH_CHSP_CHSP" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.CHSP.CHSP" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_chan_spacing_actual()</name>
                <name>CALC_Synth.calc_chan_spacing_actual()</name>
                <name>CALC_Synth.calc_chan_spacing_actual()</name>
                <name>CALC_Synth.calc_chan_spacing_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SYNTH_DIVCTRL_LODIVFREQCTRL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.DIVCTRL.LODIVFREQCTRL" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_lodiv_actual()</name>
                <name>CALC_Synth.calc_lodiv_actual()</name>
                <name>CALC_Synth.calc_lodiv_actual()</name>
                <name>CALC_Synth.calc_lodiv_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SYNTH_FREQ_FREQ" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.FREQ.FREQ" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_base_frequency_actual()</name>
                <name>CALC_Synth.calc_rx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_tx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_base_frequency_actual()</name>
                <name>CALC_Synth.calc_rx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_tx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_base_frequency_actual()</name>
                <name>CALC_Synth.calc_rx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_tx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_base_frequency_actual()</name>
                <name>CALC_Synth.calc_rx_synth_freq_actual()</name>
                <name>CALC_Synth.calc_tx_synth_freq_actual()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SYNTH_IFFREQ_IFFREQ" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.IFFREQ.IFFREQ" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="SYNTH_IFFREQ_LOSIDE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="SYNTH.IFFREQ.LOSIDE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Synth.calc_lo_side_regs()</name>
            </access_write>
        </variable>
        <variable name="MODEM_MIXCTRL_MODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.MIXCTRL.MODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Synth.calc_lo_side_regs()</name>
            </access_write>
        </variable>
        <variable name="MODEM_MIXCTRL_DIGIQSWAPEN" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="MODEM.MIXCTRL.DIGIQSWAPEN" value_do_not_care="false">
            <values>
                <calculated>
                    <value>1</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Synth.calc_lo_side_regs()</name>
            </access_write>
        </variable>
        <variable name="tuning_limit_min" type="int" is_array="false" format="decimal" desc="Minimum center frequency allowed for the current configuration." forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tuning_limit_max" type="int" is_array="false" format="decimal" desc="Maximum center frequency allowed for the current configuration." forceable="true" units="Hz" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="subgig_band" type="bool" is_array="false" format="decimal" desc="Flag for sub-GHz" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_AGC.calc_agc_reg()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_AGC.calc_agc_reg()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_AGC.calc_agc_reg()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
                <name>CALC_AGC.calc_agc_reg()</name>
                <name>CALC_Diversity.calc_diversity_values()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="lo_injection_side" type="enum" is_array="false" format="decimal" desc="Possible LO injection sides" forceable="true" value_do_not_care="false">
            <enum name="LoInjectionSideEnum" desc="List of supported LO injection side configurations">
                <members>
                    <member name="HIGH_SIDE" value="0" desc="The local oscillator (LO) is higher in frequency than the receive RF channel"/>
                    <member name="LOW_SIDE" value="1" desc="The local oscillator (LO) is lower in frequency than the receive RF channel."/>
                </members>
            </enum>
            <values>
                <calculated>
                    <value>LoInjectionSideEnum.HIGH_SIDE</value>
                </calculated>
                <forced>
                    <value>LoInjectionSideEnum.HIGH_SIDE</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Synth.calc_lo_side_regs()</name>
            </access_read>
            <access_write>
                <name>CALC_Synth.calc_lo_side_regs()</name>
            </access_write>
        </variable>
        <variable name="max_timing_window" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="timing_window" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_bitrate_error" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tx_bitrate_error" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="rx_deviation_error" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="tx_deviation_error" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="bw_error" type="float" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
        <variable name="white_poly" type="enum" is_array="false" format="decimal" desc="List of supported Whitening Polynomials" forceable="true" value_do_not_care="false">
            <enum name="WhitePolyEnum" desc="List of supported Whitening Polynomials">
                <members>
                    <member name="NONE" value="0" desc="No Whitening"/>
                    <member name="PN9" value="1" desc="X9+X5+1"/>
                    <member name="PN9_BYTE" value="2" desc="X9+X5+X1"/>
                    <member name="PN16" value="3" desc="X16+X14+X13+X11+1"/>
                    <member name="BLE" value="4" desc="X7+X4+1"/>
                    <member name="Bytewise_XOR_seed_LSB" value="5" desc="Each byte is XORed LSbyte of whitening seed"/>
                    <member name="PN9_802154" value="6" desc="PN9 sequence per IEEE 802.15.4"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>WhitePolyEnum.NONE</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="white_seed" type="int" is_array="false" format="hex" desc="Whitening Initialization Value" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>131070</value>
                </calculated>
                <forced>
                    <value>65535</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="white_output_bit" type="int" is_array="false" format="hex" desc="Whitening Output Bit" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced>
                    <value>0</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="FRC_WHITECTRL_SHROUTPUTSEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WHITECTRL.SHROUTPUTSEL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_write>
        </variable>
        <variable name="FRC_WHITECTRL_XORFEEDBACK" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WHITECTRL.XORFEEDBACK" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_write>
        </variable>
        <variable name="FRC_WHITECTRL_FEEDBACKSEL" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WHITECTRL.FEEDBACKSEL" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_write>
        </variable>
        <variable name="FRC_WHITEPOLY_POLY" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WHITEPOLY.POLY" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_write>
        </variable>
        <variable name="FRC_WHITEINIT_WHITEINIT" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.WHITEINIT.WHITEINIT" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_write>
        </variable>
        <variable name="frame_coding" type="enum" is_array="false" format="decimal" desc="List of supported frame coding methods" forceable="true" value_do_not_care="false">
            <enum name="FrameCodingEnum" desc="List of supported Frame Coding Methods">
                <members>
                    <member name="NONE" value="0" desc="No Frame Coding"/>
                    <member name="UART_NO_VAL" value="1" desc="UART Frame Coding without start/stop bit validation"/>
                    <member name="UART_VAL" value="2" desc="UART Frame Coding with start/stop bit validation"/>
                    <member name="MBUS_3OF6" value="3" desc="Mbus 3 of 6 coding"/>
                </members>
            </enum>
            <values>
                <calculated/>
                <forced>
                    <value>FrameCodingEnum.NONE</value>
                </forced>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Errors.calc_block_white_errors()</name>
                <name>CALC_Whitening.calc_frame_coding()</name>
                <name>CALC_Whitening.calc_frame_coding_array_packed()</name>
                <name>CALC_Whitening.calc_uartmode()</name>
            </access_read>
            <access_write>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_array" type="int" is_array="true" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_frame_coding()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_message_bits" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_frame_coding()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_coded_bits" type="int" is_array="false" format="decimal" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_frame_coding()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_array_width" type="int" is_array="false" format="decimal" desc="Bytes required for coding table entries.  0=frame coding disabled, 8=one byte, 16=two bytes" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
                <name>CALC_Whitening.calc_frame_coding_reg_values()</name>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_frame_coding()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_fshroutputsel_val" type="int" is_array="false" format="hex" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_frame_coding_reg_values()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_poly_val" type="int" is_array="false" format="hex" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
                <name>CALC_Whitening.calc_white_settings()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_frame_coding_reg_values()</name>
            </access_write>
        </variable>
        <variable name="FRC_FECCTRL_BLOCKWHITEMODE" type="int" is_array="false" format="hex" desc="" forceable="true" svd_mapping="FRC.FECCTRL.BLOCKWHITEMODE" value_do_not_care="false">
            <values>
                <calculated>
                    <value>0</value>
                </calculated>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write>
                <name>CALC_Whitening.calc_blockwhitemode()</name>
            </access_write>
        </variable>
        <variable name="frame_coding_array_packed" type="int" is_array="true" format="hex" desc="" forceable="true" value_do_not_care="false">
            <values>
                <calculated/>
                <forced/>
            </values>
            <access_read>
                <name>Common.calc_doubleAllOutputs()</name>
            </access_read>
            <access_write/>
        </variable>
    </variables>
    <features>
        <feature name="TX" desc="Transmit" value="true"/>
        <feature name="RX" desc="Receive" value="true"/>
        <feature name="BLE" desc="Bluetooth Low-Energy" value="true"/>
        <feature name="SUBGIG" desc="Proprietary Sub-GHz" value="true"/>
        <feature name="GIG_2_4" desc="Proprietary 2.4GHz" value="true"/>
    </features>
    <logs>
        <log type="debug">Called silabs_validation_host_py_radio_config_git_Package_pyradioconfig_parts_unit_test_part_calculators_common_p.calc_doubleAllOutputs()</log>
        <log type="debug">Called silabs_validation_host_py_radio_config_git_Package_pyradioconfig_parts_unit_test_part_calculators_common_p.calc_someOtherCalcFunction()</log>
        <log type="info">Called silabs_validation_host_py_radio_config_git_Package_pyradioconfig_parts_unit_test_part_calculators_synth_p.calc_rx_synth_freq_actual()</log>
        <log type="info">Called silabs_validation_host_py_radio_config_git_Package_pyradioconfig_parts_unit_test_part_calculators_synth_p.calc_tx_synth_freq_actual()</log>
        <log type="info">Called silabs_validation_host_py_radio_config_git_Package_pyradioconfig_parts_unit_test_part_calculators_synth_p.calc_someNewFunction()</log>
        <log type="info">I'm some cool calculator calc_newFunction</log>
        <log type="info">Called silabs_validation_host_py_radio_config_git_Package_pyradioconfig_parts_unit_test_part_calculators_synth_p.calc_newFunction2()</log>
        <log type="info">I'm some cool calculator calc_newFunction2</log>
    </logs>
</model>
