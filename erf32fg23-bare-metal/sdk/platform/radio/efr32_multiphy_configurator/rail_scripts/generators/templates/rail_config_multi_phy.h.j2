{% extends "base.j2" %}
{% block filename %}{{filename}}.h{% endblock %}
{% block title %}{{title}} Header{% endblock %}
{% block content %}
#ifndef __{{filename|upper}}_H__
#define __{{filename|upper}}_H__

#include <stdint.h>
#include "rail_types.h"
{%- if multiPhyConfig.commonStructures.modeSwitchPhyModeIds|length %}
#include "rail_ieee802154.h"
{%- endif %}
{%- if rail_internal and not rail_secondary_config %}
#include "timing_state.h"
{%- endif %}
{{- "\n" -}}

{%- if not rail_secondary_config %}
{%- if accelerationBufferSize > 0 %}
#define {{protocol|upper}}_ACCELERATION_BUFFER {{protocol}}AccelerationBuffer
extern uint32_t {{protocol}}AccelerationBuffer[];
{% endif %}
{%- if multiPhyConfig.commonStructures.convDecodeBufferSize > 0 %}
// NOTE: This buffer is to be used exclusively by hardware
extern uint8_t convDecodeBuffer[];
{% endif %}
{%- endif %}

{%- if rail_internal %}
{%- if multiPhyConfig.commonStructures.modemConfigEntriesBase|length > 0 %}
{%- for modemConfigName, modemConfig in multiPhyConfig.commonStructures.modemConfigEntriesBase.items() %}
extern const uint32_t {{modemConfigName}}[];
{%- endfor %}
{% endif %}

{%- if multiPhyConfig.commonStructures.modemConfigEntries|length > 0 %}
{%- for modemConfigName, modemConfig in multiPhyConfig.commonStructures.modemConfigEntries.items() %}
extern const uint32_t {{modemConfigName}}[];
{%- endfor %}
{% endif %}

{%- for multiPhyConfigEntryName, multiPhyConfigEntry in multiPhyConfig.multiPhyConfigEntries.items() %}
{%- if multiPhyConfigEntry.phyName %}
#define RAIL0_{{multiPhyConfigEntryName|upper}}_{{multiPhyConfigEntry.phyName|upper}}
{%- endif %}
{%- if multiPhyConfigEntry.profile %}
#define RAIL0_{{multiPhyConfigEntryName|upper}}_PROFILE_{{multiPhyConfigEntry.profile|upper}}
{%- endif %}
extern const RAIL_ChannelConfig_t {{multiPhyConfigEntryName}}_channelConfig;
extern const RAIL_ChannelConfigEntry_t {{multiPhyConfigEntryName}}_channels[];
{% endfor %}

{%- else %}

{%- set firstMultiPhyConfigEntryName, firstMultiPhyConfigEntryValue = multiPhyConfig.multiPhyConfigEntries|firstElement %}
{%- set firstPhyConfigEntryName, firstPhyConfigEntryValue = firstMultiPhyConfigEntryValue.phyConfigEntries|firstElement %}
#define RADIO_CONFIG_XTAL_FREQUENCY {{firstPhyConfigEntryValue.xtalFrequency}}UL
{{- "\n" -}}

{%- if firstMultiPhyConfigEntryValue.phyName %}
#define RAIL0_{{firstPhyConfigEntryName|upper}}_{{firstMultiPhyConfigEntryValue.phyName|upper}}
{%- endif %}
{%- if firstMultiPhyConfigEntryValue.profile %}
#define RAIL0_{{firstPhyConfigEntryName|upper}}_PROFILE_{{firstMultiPhyConfigEntryValue.profile|upper}}
{%- endif %}
extern const RAIL_ChannelConfig_t *channelConfigs[];
{%- if not rail_internal -%}
{%- if multiPhyConfig.commonStructures.rffpllConfigEntries.items()|length %}
#define RADIO_CONFIG_RFFPLL_CONFIG_PRESENT
extern const RAIL_RffpllConfig_t *radioConfigRffpllConfig;
{%- endif %}
{%- endif %}
{% endif %}

{%- if multiPhyConfig.commonStructures.modeSwitchPhyModeIds|length %}
#define WISUN_MODESWITCHPHRS_ARRAY_SIZE {{multiPhyConfig.commonStructures.modeSwitchPhyModeIds|length}}
extern const uint8_t wisun_modeSwitchPhrsLength;
extern const RAIL_IEEE802154_ModeSwitchPhr_t wisun_modeSwitchPhrs[WISUN_MODESWITCHPHRS_ARRAY_SIZE];
{% endif %}

{%- for struct_name, struct_obj in multiPhyConfig.commonStructures.stackInfoProtocolTableEntries.items() %}
{%- if struct_obj['enable'] == True %}
typedef struct {{struct_name}} {
  RAIL_StackInfoCommon_t stackInfoCommon;
{%- for field_name, field_value in struct_obj.items() %}
  {%- if field_name != 'enable' %}
  uint8_t {{field_name}};
  {%- endif %}
  {%- if field_name == 'wisunChannelParam' -%}
  // wisunOperatingClass for version=0, wisunChannelPlanId for version=1
  {%- endif %}
{%- endfor %}
} {{struct_name}}_t;
{% endif %}
{%- endfor %}

{{- "\n" -}}
#endif // __{{filename|upper}}_H__
{{- "\n" -}}
{%- endblock %}
