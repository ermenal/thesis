// This file is automatically generated by the python sequence
// compiler script located in rail_scripts: seqacc_compiler.py
#include "em_device.h"
#include "seqacc_sequences.h"
{% for name, sequence in Sequences.items() %}
{% if sequence.condition -%}
{{ sequence.condition }}
{% endif -%}
{% if sequence.isConst -%}
{{'const '}}
{%- endif -%}
uint32_t {{name}}[] = {
  {%- for action in sequence.value %}
    {%- for instruction, data in action.inst.items() %}
  {{"0x{0:08X}UL,".format(instruction)}}
  {{- "{}".format(action|printAction(data[0][1])) -}}
  {{- "{}".format(action|getAddrFromInst(instruction)) -}}
      {%- for offsetAndValue in data[1:] %}
  {{"/*  0x{0:04X} */".format(offsetAndValue[0])}}
{{- "{}".format(action|printAction(offsetAndValue[1])) -}}
      {%- endfor %}
    {%- endfor %}
  {%- endfor %}
};
{% if sequence.condition -%}
#endif
{% endif -%}
{% endfor %}

{%- for baseAddrName, baseAddrCfg in RegBases.items() %}
uint32_t {{baseAddrName}}Array[] = {
  {%- for addr in baseAddrCfg['BaseAddr'].keys() %}
  {{"0x{0:08X}UL,".format(addr)}}
  {%- endfor %}
};
{% endfor %}

{%- for baseAddrName, baseAddrCfg in RegBases.items() %}
SeqAccBaseAddrCfg_t {{baseAddrName}} = {
  .basePos = {{"0x{0:08X}U,".format(baseAddrCfg['BasePos'])}}
  .baseAddrPtr = (uint32_t *) {{baseAddrName}}Array
};
{% endfor %}

{%- for name, sequence in Sequences.items() %}
{% if sequence.condition -%}
{{ sequence.condition }}
{% endif -%}
SeqAccEntry_t {{name}}Entry = {
  .baseAddrCfgPtr = &{{sequence.data['BaseAddrCfg']}},
  .sequenceCfg = {{"0x{0:08X}U,".format(sequence.sequenceCfg)}}
  .sequencePtr = (RAILInt_RadioConfig_t) {{name}},
  .sequenceWords = {{sequence.lengthWord}}U
};
{% if sequence.condition -%}
#endif
{% endif -%}
{% endfor %}