/*****************************************************************************/
/**
 * Copyright 2020 Silicon Laboratories, Inc.
 *
 *****************************************************************************/
//
// *** Generated file. Do not edit! ***
//

#include PLATFORM_HEADER
#include "stack/include/ember.h"
#include "zigbee_stack_callback_dispatcher.h"


{# AF_SUPPORT_INCOMING_MESSAGE #}
#if defined(EMBER_AF_NCP) && defined(SL_CATALOG_ZIGBEE_AF_SUPPORT_PRESENT)
// Incoming Message
bool sli_zb_af_support_incoming_message(
      // The aps Frame
      EmberApsFrame *apsFrame)
{
(void) apsFrame;
{% set matchCount = namespace(value=0) -%}

return (
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "af_support_incoming_message" -%}
{% if matchCount.value == 1 -%}
||
{% endif -%}
{{ cb['function_name'] }}(apsFrame)
{% set matchCount.value = matchCount.value + 1 -%}
{% endif -%}
{% endfor -%}

{% if matchCount.value == 0 -%}
false
{% endif -%}
);
}
#endif // defined(EMBER_AF_NCP) && defined(SL_CATALOG_ZIGBEE_AF_SUPPORT_PRESENT)

{# INCOMING_MESSAGE #}
#ifdef EZSP_HOST
// Incoming Message
void sli_zb_af_incoming_message(
      // Incoming message type
      EmberIncomingMessageType type,
      // The aps Frame
      EmberApsFrame *apsFrame,
      // The link quality
      uint8_t lastHopLqi,
      // The energy level
      int8_t lastHopRssi,
      // The sender of the message.
      EmberNodeId sender,
      // The index of a binding that matches the message
      // matching binding.
      uint8_t bindingIndex,
      // The index of the entry in the address table
      uint8_t addressIndex,
      // The message length
      uint8_t messageLength,
      // message
      uint8_t *messageContents)
{
(void) type;
(void) apsFrame;
(void) lastHopLqi;
(void) lastHopRssi;
(void) sender;
(void) bindingIndex;
(void) addressIndex;
(void) messageLength;
(void) messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_message" -%}
{{ cb['function_name'] }}(type, apsFrame, lastHopLqi, lastHopRssi, sender, bindingIndex, addressIndex, messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Incoming Message
void sli_zb_af_incoming_message(
      // Incoming message type
      EmberIncomingMessageType type,
      // The aps Frame
      EmberApsFrame *apsFrame,
      // message
      EmberMessageBuffer message)
{
(void)type;
(void)apsFrame;
(void)message;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_message" -%}
{{ cb['function_name'] }}(type, apsFrame, message);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST

{# MESSAGE_SENT #}
// Message Sent
#ifdef EZSP_HOST
void sli_zigbee_af_message_sent(
      // Outgoing message type
      EmberOutgoingMessageType type,
      // Index or destination of the message
      uint16_t indexOrDestination,
      // The aps Frame
      EmberApsFrame *apsFrame,
      // Message tag
      uint8_t messageTag,
      // Message delivery status
      EmberStatus status,
      // The length of the messageContents
      uint8_t messageLength,
      // Message data
      uint8_t *messageContents)
{
(void)type;
(void)indexOrDestination;
(void)apsFrame;
(void)messageTag;
(void)status;
(void) messageLength;
(void) messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "message_sent" -%}
{{ cb['function_name'] }}(type, indexOrDestination, apsFrame, messageTag, status, messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
void sli_zigbee_af_message_sent(
      // Outgoing message type
      EmberOutgoingMessageType type,
      // Index or destination of the message
      uint16_t indexOrDestination,
      // The aps Frame
      EmberApsFrame *apsFrame,
      // message
      EmberMessageBuffer message,
      // Message delivery status
      EmberStatus status)
{
(void)type;
(void)indexOrDestination;
(void)apsFrame;
(void)message;
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "message_sent" -%}
{{ cb['function_name'] }}(type, indexOrDestination, apsFrame, message, status);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# TRUST_CENTER_JOIN #}
// Trust Center Join
#ifdef EZSP_HOST
void sli_zigbee_af_trust_center_join(
      // Joining node's id
      EmberNodeId newNodeId,
      // Joining node's Eui64
      EmberEUI64 newNodeEui64,
      // Status
      EmberDeviceUpdate status,
      // Policy Decision
      EmberJoinDecision policyDecision,
      // Parent Id of the joining node
      EmberNodeId parentOfNewNode)
{
(void)newNodeId;
(void)newNodeEui64;
(void)status;
(void)policyDecision;
(void)parentOfNewNode;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "trust_center_join" -%}
{{ cb['function_name'] }}(newNodeId, newNodeEui64, status, policyDecision, parentOfNewNode);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
void sli_zigbee_af_trust_center_join(
      // Joining node's id
      EmberNodeId newNodeId,
      // Joining node's Eui64
      EmberEUI64 newNodeEui64,
      // Status
      EmberDeviceUpdate status,
      // Parent Id of the joining node
      EmberNodeId parentOfNewNode)
{
(void)newNodeId;
(void)newNodeEui64;
(void)status;
(void)parentOfNewNode;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "trust_center_join" -%}
{{ cb['function_name'] }}(newNodeId, newNodeEui64, status, parentOfNewNode);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST

{# MARK_BUFFERS #}
// Mark Buffers
void sli_zigbee_af_mark_buffers(void)
{

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mark_buffers" -%}
{{ cb['function_name'] }}();
{% endif -%}
{% endfor -%}
}


{# PACKET_HANDOFF_INCOMING #}
// Packet Handoff Incoming
void sli_zigbee_af_packet_handoff_incoming(
      EmberZigbeePacketType packetType,
      EmberMessageBuffer packetBuffer,
      uint8_t index,
      // Return: 
      void *data)
{
(void)packetType;
(void)packetBuffer;
(void)index;
(void)data;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "packet_handoff_incoming" -%}
{{ cb['function_name'] }}(packetType, packetBuffer, index, data);
{% endif -%}
{% endfor -%}
}


{# PACKET_HANDOFF_OUTGOING #}
// Packet Handoff Outgoing
void sli_zigbee_af_packet_handoff_outgoing(
      EmberZigbeePacketType packetType,
      EmberMessageBuffer packetBuffer,
      uint8_t index,
      // Return: 
      void *data)
{
(void)packetType;
(void)packetBuffer;
(void)index;
(void)data;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "packet_handoff_outgoing" -%}
{{ cb['function_name'] }}(packetType, packetBuffer, index, data);
{% endif -%}
{% endfor -%}
}


{# INCOMING_MFG_TEST_MESSAGE #}
// Incoming Mfg Test Message
void sli_zigbee_af_incoming_mfg_test_message(
      uint8_t messageType,
      uint8_t dataLength,
      // Return: 
      uint8_t *data)
{
(void)messageType;
(void)dataLength;
(void)data;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_mfg_test_message" -%}
{{ cb['function_name'] }}(messageType, dataLength, data);
{% endif -%}
{% endfor -%}
}


{# OVERRIDE_INCOMING_ROUTE_RECORD #}
// Override Incoming Route Record
void sli_zigbee_af_override_incoming_route_record(
      EmberNodeId source,
      EmberEUI64 sourceEui,
      uint8_t relayCount,
      EmberMessageBuffer header,
      uint8_t relayListIndex,
      // Return: 
      bool *consumed)
{
(void)source;
(void)sourceEui;
(void)relayCount;
(void)header;
(void)relayListIndex;
(void)consumed;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "override_incoming_route_record" -%}
{{ cb['function_name'] }}(source, sourceEui, relayCount, header, relayListIndex, consumed);
{% endif -%}
{% endfor -%}
}


{# OVERRIDE_APPEND_SOURCE_ROUTE #}
// Override Append Source Route
// Return: Added bytes
void sli_zigbee_af_override_append_source_route(
      EmberNodeId destination,
      // Return: 
      EmberMessageBuffer *header,
      // Return: 
      bool *consumed)
{
(void)destination;
(void)header;
(void)consumed;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "override_append_source_route" -%}
{{ cb['function_name'] }}(destination, header, consumed);
{% endif -%}
{% endfor -%}
}


{# OVERRIDE_FURTHUR_INDEX_FOR_SOURCE_ROUTE_ADD_ENTRY #}
// Override Furthur Index For Source Route Add Entry
void sli_zigbee_af_override_furthur_index_for_source_route_add_entry(
      EmberNodeId id,
      // Return: 
      uint8_t *furtherIndex)
{
(void)id;
(void)furtherIndex;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "override_furthur_index_for_source_route_add_entry" -%}
{{ cb['function_name'] }}(id, furtherIndex);
{% endif -%}
{% endfor -%}
}


{# STACK_STATUS #}
// Stack Status
void sli_zigbee_af_stack_status(
      // Stack status
      EmberStatus status)
{
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "stack_status" -%}
{{ cb['function_name'] }}(status);
{% endif -%}
{% endfor -%}
}

{# REDIRECT_OUTGOING_MESSAGE #}
// Redirect Outgoing Message
void sli_zigbee_af_redirect_outgoing_message(
      // The mac index used to redirect messages
      uint8_t mac_index,
      // Packet buffer header
      EmberMessageBuffer header,
      // Transmit priority
      uint8_t priority)
{
(void)mac_index;
(void)header;
(void)priority;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "redirect_outgoing_message" -%}
{{ cb['function_name'] }}(mac_index, header, priority);
{% endif -%}
{% endfor -%}
}


{# ENERGY_SCAN_RESULT #}
// Energy Scan Result
void sli_zigbee_af_energy_scan_result(
      // The 802.15.4 channel number that was scanned.
      uint8_t channel,
      // The maximum RSSI value found on the channel.
      int8_t maxRssiValue)
{
(void)channel;
(void)maxRssiValue;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "energy_scan_result" -%}
{{ cb['function_name'] }}(channel, maxRssiValue);
{% endif -%}
{% endfor -%}
}


{# NETWORK_FOUND #}
// Network Found
void sli_zigbee_af_network_found(
      // The parameters associated with the network found.
      EmberZigbeeNetwork *networkFound,
      // The link quality indication of the network found.
      uint8_t lqi,
      // The received signal strength indication of the network found.
      int8_t rssi)
{
(void)networkFound;
(void)lqi;
(void)rssi;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "network_found" -%}
{{ cb['function_name'] }}(networkFound, lqi, rssi);
{% endif -%}
{% endfor -%}
}


{# SCAN_COMPLETE #}
// Scan Complete
void sli_zigbee_af_scan_complete(
      // The channel on which the current error occurred. Undefined for the case
      // of EMBER_SUCCESS.
      uint8_t channel,
      // The error condition that occurred on the current channel. Value will be
      // EMBER_SUCCESS when the scan has completed.
      EmberStatus status)
{
(void)channel;
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "scan_complete" -%}
{{ cb['function_name'] }}(channel, status);
{% endif -%}
{% endfor -%}
}


{# UNUSED_PAN_ID_FOUND #}
// Unused Pan Id Found
void sli_zigbee_af_unused_pan_id_found(
      // The unused panID which has been found.
      EmberPanId panId,
      // The channel that the unused panID was found on.
      uint8_t channel)
{
(void)panId;
(void)channel;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "unused_pan_id_found" -%}
{{ cb['function_name'] }}(panId, channel);
{% endif -%}
{% endfor -%}
}


{# CHILD_JOIN #}
// Child Join
#ifdef EZSP_HOST
void sli_zigbee_af_child_join(
      // The index of the child of interest.
      uint8_t index,
      // True if the child is joining. False the child is leaving.
      bool joining,
      // The node ID of the child.
      EmberNodeId childId,
      // The EUI64 of the child.
      EmberEUI64 childEui64,
      // The node type of the child.
      EmberNodeType childType)
{
(void)index;
(void)joining;
(void)childId;
(void)childEui64;
(void)childType;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "child_join" -%}
{{ cb['function_name'] }}(index, joining, childId, childEui64, childType);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
void sli_zigbee_af_child_join(
      // The index of the child of interest.
      uint8_t index,
      // True if the child is joining. False the child is leaving.
      bool joining)
{
(void)index;
(void)joining;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "child_join" -%}
{{ cb['function_name'] }}(index, joining);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# DUTY_CYCLE #}
// Duty Cycle
#ifdef EZSP_HOST
void sli_zigbee_af_duty_cycle(
      // The channel page whose duty cycle state has changed.
      uint8_t channelPage,
      // The channel number whose duty cycle state has changed.
      uint8_t channel,
      // The current duty cycle state.
      EmberDutyCycleState state,
      // The total number of connected end devices that are being monitored for
      // duty cycle.
      uint8_t totalDevices,
      // Consumed duty cycles of end devices that are being monitored. The first
      // entry always be the local stack's nodeId, and thus the total aggregate
      // duty cycle for the device.
      EmberPerDeviceDutyCycle *arrayOfDeviceDutyCycles)
{
(void)channelPage;
(void)channel;
(void)state;
(void)totalDevices;
(void)arrayOfDeviceDutyCycles;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "duty_cycle" -%}
{{ cb['function_name'] }}(channelPage, channel, state, totalDevices, arrayOfDeviceDutyCycles);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
void sli_zigbee_af_duty_cycle(
      // The channel page whose duty cycle state has changed.
      uint8_t channelPage,
      // The channel number whose duty cycle state has changed.
      uint8_t channel,
      // The current duty cycle state.
      EmberDutyCycleState state)
{
(void)channelPage;
(void)channel;
(void)state;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "duty_cycle" -%}
{{ cb['function_name'] }}(channelPage, channel, state);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# REMOTE_SET_BINDING #}
// Remote Set Binding
// Return: ZDO response status.
void sli_zigbee_af_remote_set_binding(
      // Return: The contents of the binding entry.
      EmberBindingTableEntry *entry)
{
(void)entry;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "remote_set_binding" -%}
{{ cb['function_name'] }}(entry);
{% endif -%}
{% endfor -%}
}


{# REMOTE_DELETE_BINDING #}
// Remote Delete Binding
// Return: ZDO response status
void sli_zigbee_af_remote_delete_binding(
      // The index of the binding whose deletion was requested.
      uint8_t index)
{
(void)index;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "remote_delete_binding" -%}
{{ cb['function_name'] }}(index);
{% endif -%}
{% endfor -%}
}


{# POLL_COMPLETE #}
// Poll Complete
void sli_zigbee_af_poll_complete(
      // An EmberStatus value: EMBER_SUCCESS - Data was received in response to
      // the poll. EMBER_MAC_NO_DATA - No data was pending.
      // EMBER_DELIVERY_FAILED - The poll message could not be sent.
      // EMBER_MAC_NO_ACK_RECEIVED - The poll message was sent but not
      // acknowledged by the parent.
      EmberStatus status)
{
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "poll_complete" -%}
{{ cb['function_name'] }}(status);
{% endif -%}
{% endfor -%}
}


{# POLL #}
// Poll
void sli_zigbee_af_poll(
      // The node ID of the child that is requesting data.
      EmberNodeId childId,
      // True if transmit expected, false otherwise.
      bool transmitExpected)
{
(void)childId;
(void)transmitExpected;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "poll" -%}
{{ cb['function_name'] }}(childId, transmitExpected);
{% endif -%}
{% endfor -%}
}


{# DEBUG #}
#ifdef EZSP_HOST
// Debug
void sli_zigbee_af_debug(
      // debug message length
      uint8_t messageLength,
      // debug message
      uint8_t *messageContents)
{
(void)messageLength;
(void)messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "debug" -%}
{{ cb['function_name'] }}(messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Debug
void sli_zigbee_af_debug(
      // debug message
      EmberMessageBuffer message)
{
(void)message;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "debug" -%}
{{ cb['function_name'] }}(message);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# INCOMING_MANY_TO_ONE_ROUTE_REQUEST #}
// Incoming Many To One Route Request
void sli_zigbee_af_incoming_many_to_one_route_request(
      // The short id of the concentrator.
      EmberNodeId source,
      // The EUI64 of the concentrator.
      EmberEUI64 longId,
      // The path cost to the concentrator. The cost may decrease as additional
      // route request packets for this discovery arrive, but the callback is
      // made only once.
      uint8_t cost)
{
(void)source;
(void)longId;
(void)cost;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_many_to_one_route_request" -%}
{{ cb['function_name'] }}(source, longId, cost);
{% endif -%}
{% endfor -%}
}


{# INCOMING_ROUTE_ERROR #}
// Incoming Route Error
void sli_zigbee_af_incoming_route_error(
      // EMBER_SOURCE_ROUTE_FAILURE or EMBER_MANY_TO_ONE_ROUTE_FAILURE.
      EmberStatus status,
      // The short id of the remote node.
      EmberNodeId target)
{
(void)status;
(void)target;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_route_error" -%}
{{ cb['function_name'] }}(status, target);
{% endif -%}
{% endfor -%}
}


{# INCOMING_NETWORK_STATUS #}
// Incoming Network Status
void sli_zigbee_af_incoming_network_status(
      // One byte over-the-air error code from network status message
      uint8_t errorCode,
      // The short ID of the remote node
      EmberNodeId target)
{
(void)errorCode;
(void)target;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_network_status" -%}
{{ cb['function_name'] }}(errorCode, target);
{% endif -%}
{% endfor -%}
}


{# INCOMING_ROUTE_RECORD #}
// Incoming Route Record
void sli_zigbee_af_incoming_route_record(
      // The source of the route record.
      EmberNodeId source,
      // The EUI64 of the source.
      EmberEUI64 sourceEui,
      // The number of relays in relayList.
      uint8_t relayCount,
      // Header.
      EmberMessageBuffer header,
      // The relay List Index.
      uint8_t relayListIndex)
{
(void)source;
(void)sourceEui;
(void)relayCount;
(void)header;
(void)relayListIndex;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_route_record" -%}
{{ cb['function_name'] }}(source, sourceEui, relayCount, header, relayListIndex);
{% endif -%}
{% endfor -%}
}


{# ID_CONFLICT #}
// Id Conflict
void sli_zigbee_af_id_conflict(
      // The short id for which a conflict was detected
      EmberNodeId conflictingId)
{
(void)conflictingId;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "id_conflict" -%}
{{ cb['function_name'] }}(conflictingId);
{% endif -%}
{% endfor -%}
}


{# MAC_PASSTHROUGH_MESSAGE #}
#ifdef EZSP_HOST
// Mac Passthrough Message
void sli_zigbee_af_mac_passthrough_message(
      // The type of MAC passthrough message received.
      EmberMacPassthroughType messageType,
      // last hop lqi.
      uint8_t lastHopLqi,
      // last hop rssi.
      int8_t lastHopRssi,
      // message length.
      uint8_t messageLength,
      // The raw message that was received.
      uint8_t *messageContents)
{
(void)messageType;
(void)lastHopLqi;
(void)lastHopRssi;
(void)messageLength;
(void)messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_passthrough_message" -%}
{{ cb['function_name'] }}(messageType, lastHopLqi, lastHopRssi, messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Mac Passthrough Message
void sli_zigbee_af_mac_passthrough_message(
      // The type of MAC passthrough message received.
      EmberMacPassthroughType messageType,
      // The raw message that was received.
      EmberMessageBuffer message)
{
(void)messageType;
(void)message;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_passthrough_message" -%}
{{ cb['function_name'] }}(messageType, message);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# STACK_TOKEN_CHANGED #}
// Stack Token Changed
void sli_zigbee_af_stack_token_changed(
      // The address of the stack token that has changed.
      uint16_t tokenAddress)
{
(void)tokenAddress;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "stack_token_changed" -%}
{{ cb['function_name'] }}(tokenAddress);
{% endif -%}
{% endfor -%}
}


{# TIMER #}
// Timer
void sli_zigbee_af_timer(
      // Which timer generated the callback (0 or 1).
      uint8_t timerId)
{
(void)timerId;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "timer" -%}
{{ cb['function_name'] }}(timerId);
{% endif -%}
{% endfor -%}
}


{# COUNTER_ROLLOVER #}
// Counter Rollover
void sli_zigbee_af_counterRollover(
      // Type of Counter
      EmberCounterType type)
{
(void)type;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "counter_rollover" -%}
{{ cb['function_name'] }}(type);
{% endif -%}
{% endfor -%}
}


{# RAW_TRANSMIT_COMPLETE #}
// Raw Transmit Complete
void sli_zigbee_af_raw_transmit_complete(
      // message
      EmberMessageBuffer message,
      // EMBER_SUCCESS if the transmission was successful, or
      // EMBER_DELIVERY_FAILED if not
      EmberStatus status)
{
(void)message;
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "raw_transmit_complete" -%}
{{ cb['function_name'] }}(message, status);
{% endif -%}
{% endfor -%}
}


{# SWITCH_NETWORK_KEY #}
// Switch Network Key
void sli_zigbee_af_switch_network_key(
      // The sequence number of the new network key.
      uint8_t sequenceNumber)
{
(void)sequenceNumber;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "switch_network_key" -%}
{{ cb['function_name'] }}(sequenceNumber);
{% endif -%}
{% endfor -%}
}


{# ZIGBEE_KEY_ESTABLISHMENT #}
// Zigbee Key Establishment
void sli_zigbee_af_zigbee_key_establishment(
      // This is the IEEE address of the partner that the device successfully
      // established a key with. This value is all zeros on a failure.
      EmberEUI64 partner,
      // This is the status indicating what was established or why the key
      // establishment failed.
      EmberKeyStatus status)
{
(void)partner;
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zigbee_key_establishment" -%}
{{ cb['function_name'] }}(partner, status);
{% endif -%}
{% endfor -%}
}


{# GENERATE_CBKE_KEYS #}
// Generate Cbke Keys
void sli_zigbee_af_generate_cbke_keys(
      // The result of the CBKE operation.
      EmberStatus status,
      // Return: The generated ephemeral public key.
      EmberPublicKeyData *ephemeralPublicKey)
{
(void)status;
(void)ephemeralPublicKey;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "generate_cbke_keys" -%}
{{ cb['function_name'] }}(status, ephemeralPublicKey);
{% endif -%}
{% endfor -%}
}


{# CALCULATE_SMACS #}
// Calculate Smacs
void sli_zigbee_af_calculate_smacs(
      // The Result of the CBKE operation.
      EmberStatus status,
      // Return: The calculated value of the initiator's SMAC
      EmberSmacData *initiatorSmac,
      // Return: The calculated value of the responder's SMAC
      EmberSmacData *responderSmac)
{
(void)status;
(void)initiatorSmac;
(void)responderSmac;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "calculate_smacs" -%}
{{ cb['function_name'] }}(status, initiatorSmac, responderSmac);
{% endif -%}
{% endfor -%}
}


{# DSA_SIGN #}
#ifdef EZSP_HOST
// Dsa Sign
void sli_zigbee_af_dsa_sign(
      // The result of the DSA signing operation.
      EmberStatus status,
      // Message length
      uint8_t messageLength,
      // The message that includes the original message and the
      // appended signature.
      uint8_t *message)
{
(void)status;
(void)messageLength;
(void)message;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "dsa_sign" -%}
{{ cb['function_name'] }}(status, messageLength, message);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Dsa Sign
void sli_zigbee_af_dsa_sign(
      // The result of the DSA signing operation.
      EmberStatus status,
      // The message and attached which includes the original message and the
      // appended signature.
      EmberMessageBuffer signedMessage)
{
(void)status;
(void)signedMessage;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "dsa_sign" -%}
{{ cb['function_name'] }}(status, signedMessage);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# DSA_VERIFY #}
// Dsa Verify
void sli_zigbee_af_dsa_verify(
      // The result of the DSA verification operation.
      EmberStatus status)
{
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "dsa_verify" -%}
{{ cb['function_name'] }}(status);
{% endif -%}
{% endfor -%}
}


{# INCOMING_BOOTLOAD_MESSAGE #}
#ifdef EZSP_HOST
// Incoming Bootload Message
void sli_zigbee_af_incoming_bootload_message(
      // The EUI64 of the sending node.
      EmberEUI64 longId,
      // last hop lqi.
      uint8_t lastHopLqi,
      // last hop rssi.
      int8_t lastHopRssi,
      // message length.
      uint8_t messageLength,
      // The bootload message that was sent.
      uint8_t *messageContents)
{
(void)longId;
(void)lastHopLqi;
(void)lastHopRssi;
(void)messageLength;
(void)messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_bootload_message" -%}
{{ cb['function_name'] }}(longId, lastHopLqi, lastHopRssi, messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Incoming Bootload Message
void sli_zigbee_af_incoming_bootload_message(
      // The EUI64 of the sending node.
      EmberEUI64 longId,
      // The bootload message that was sent.
      EmberMessageBuffer message)
{
(void)longId;
(void)message;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_bootload_message" -%}
{{ cb['function_name'] }}(longId, message);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# BOOTLOAD_TRANSMIT_COMPLETE #}
#ifdef EZSP_HOST
// Bootload Transmit Complete
void sli_zigbee_af_bootload_transmit_complete(
      // An EmberStatus value of EMBER_SUCCESS if an ACK was received from the
      // destination or EMBER_DELIVERY_FAILED if no ACK was received.
      EmberStatus status,
      // message length.
      uint8_t messageLength,
      // The bootload message that was sent.
      uint8_t *messageContents)
{
(void)status;
(void)messageLength;
(void)messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "bootload_transmit_complete" -%}
{{ cb['function_name'] }}(status, messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Bootload Transmit Complete
void sli_zigbee_af_bootload_transmit_complete(
      // The bootload message that was sent.
      EmberMessageBuffer message,
      // An EmberStatus value of EMBER_SUCCESS if an ACK was received from the
      // destination or EMBER_DELIVERY_FAILED if no ACK was received.
      EmberStatus status)
{
(void)message;
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "bootload_transmit_complete" -%}
{{ cb['function_name'] }}(message, status);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# ZLL_NETWORK_FOUND #}
#ifdef EZSP_HOST
void sli_zigbee_af_zll_networkFound(
      // Information about the network.
      EmberZllNetwork *networkInfo,
      // Used to interpret deviceInfo field.
      bool isDeviceInfoNull,
      // Device specific information.
      EmberZllDeviceInfoRecord *deviceInfo,
      // The link quality from the node that last relayed the message.
      uint8_t lastHopLqi,
      // The energy level (in units of dBm) observed during reception.
      int8_t lastHopRssi)
{
(void)networkInfo;
(void)isDeviceInfoNull;
(void)deviceInfo;
(void)lastHopLqi;
(void)lastHopRssi;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_network_found" -%}
{{ cb['function_name'] }}(networkInfo, isDeviceInfoNull, deviceInfo, lastHopLqi, lastHopRssi);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Zll Network Found
void sli_zigbee_af_zll_networkFound(
      // Return: Information about the network.
      const EmberZllNetwork *networkInfo,
      // Return: Device specific information.
      const EmberZllDeviceInfoRecord *deviceInfo)
{
(void)networkInfo;
(void)deviceInfo;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_network_found" -%}
{{ cb['function_name'] }}(networkInfo, deviceInfo);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# ZLL_SCAN_COMPLETE #}
// Zll Scan Complete
void sli_zigbee_af_zll_scan_complete(
      // Status of the operation.
      EmberStatus status)
{
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_scan_complete" -%}
{{ cb['function_name'] }}(status);
{% endif -%}
{% endfor -%}
}


{# ZLL_ADDRESS_ASSIGNMENT #}
#ifdef EZSP_HOST
// Zll Address Assignment
void sli_zb_af_zll_address_assignment(
      // Address assignment information.
      EmberZllAddressAssignment *addressInfo,
      // The link quality from the node that last relayed the message.
      uint8_t lastHopLqi,
      // The energy level (in units of dBm) observed during reception.
      int8_t lastHopRssi)
{
(void)addressInfo;
(void)lastHopLqi;
(void)lastHopRssi;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_address_assignment" -%}
{{ cb['function_name'] }}(addressInfo, lastHopLqi, lastHopRssi);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Zll Address Assignment
void sli_zb_af_zll_address_assignment(
      // Return: Address assignment information.
      const EmberZllAddressAssignment *addressInfo)
{
(void)addressInfo;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_address_assignment" -%}
{{ cb['function_name'] }}(addressInfo);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# ZLL_TOUCH_LINK_TARGET #}
// Zll Touch Link Target
void sli_zigbee_af_zll_touch_link_target(
      // Return: Information about the network.
      const EmberZllNetwork *networkInfo)
{
(void)networkInfo;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_touch_link_target" -%}
{{ cb['function_name'] }}(networkInfo);
{% endif -%}
{% endfor -%}
}


{# MAC_FILTER_MATCH_MESSAGE #}
#ifdef EZSP_HOST
// Mac Filter Match Message
void sli_zigbee_af_mac_filter_match_message(
      // filter index match.
      uint8_t filterIndexMatch,
      // message type.
      EmberMacPassthroughType messageType,
      // last hop lqi.
      uint8_t lastHopLqi,
      // last hop rssi.
      int8_t lastHopRssi,
      // message length.
      uint8_t messageLength,
      // message contents.
      uint8_t *messageContents)
{
(void)filterIndexMatch;
(void)messageType;
(void)lastHopLqi;
(void)lastHopRssi;
(void)messageLength;
(void)messageContents;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_filter_match_message" -%}
{{ cb['function_name'] }} (filterIndexMatch, messageType, lastHopLqi, lastHopRssi, messageLength, messageContents);
{% endif -%}
{% endfor -%}
}
#else // !EZSP_HOST
// Mac Filter Match Message
void sli_zigbee_af_mac_filter_match_message(
      // Return: macFilterMatchStruct.
      const EmberMacFilterMatchStruct *macFilterMatchStruct)
{
(void)macFilterMatchStruct;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_filter_match_message" -%}
{{ cb['function_name'] }}(macFilterMatchStruct);
{% endif -%}
{% endfor -%}
}
#endif // EZSP_HOST


{# D_GP_SENT #}
// D Gp Sent
void sli_zigbee_af_d_gp_sent(
      // An EmberStatus value indicating success or the reason for failure.
      EmberStatus status,
      // The handle of the GPDF.
      uint8_t gpepHandle)
{
(void)status;
(void)gpepHandle;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "d_gp_sent" -%}
{{ cb['function_name'] }}(status, gpepHandle);
{% endif -%}
{% endfor -%}
}


{# PAN_ID_CONFLICT #}
// Pan Id Conflict
// Return: An EmberStatus value indicating success or the reason for failure.
void sli_zigbee_af_pan_id_conflict(
      // Number of conflict reports
      int8_t conflictCount)
{
(void)conflictCount;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "pan_id_conflict" -%}
{{ cb['function_name'] }}(conflictCount);
{% endif -%}
{% endfor -%}
}


{# ORPHAN_NOTIFICATION #}
// Orphan Notification
void sli_zigbee_af_orphan_notification(
      // The 8 byte EUI64 of the sender.
      EmberEUI64 longId)
{
(void)longId;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "orphan_notification" -%}
{{ cb['function_name'] }}(longId);
{% endif -%}
{% endfor -%}
}


{# COUNTER #}
// Counter
void sli_zigbee_af_counter(
      // Type of Counter
      EmberCounterType type,
      // Counter Info and value
      EmberCounterInfo Info)
{
(void)type;
(void)Info;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "counter" -%}
{{ cb['function_name'] }}(type, Info);
{% endif -%}
{% endfor -%}
}


{# MAC_PASSTHROUGH_FILTER #}
// Mac Passthrough Filter
// Return: True if mac passthrough filter was matched. False otherwise.
void sli_zigbee_af_mac_passthrough_filter(
      // Return: Mac Header of the matched messgae
      uint8_t *macHeader)
{
(void)macHeader;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_passthrough_filter" -%}
{{ cb['function_name'] }}(macHeader);
{% endif -%}
{% endfor -%}
}


{# GENERATE_CBKE_KEYS_HANDLER283K1 #}
// Generate Cbke Keys Handler283k1
void sli_zigbee_af_generate_cbke_keys_handler283k1(
      // The result of the CBKE operation.
      EmberStatus status,
      // Return: The generated ephemeral public key.
      EmberPublicKey283k1Data *ephemeralPublicKey)
{
(void)status;
(void)ephemeralPublicKey;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "generate_cbke_keys_handler283k1" -%}
{{ cb['function_name'] }}(status, ephemeralPublicKey);
{% endif -%}
{% endfor -%}
}


{# CALCULATE_SMACS_HANDLER283K1 #}
// Calculate Smacs Handler283k1
void sli_zigbee_af_calculate_smacsHandler283k1(
      // The Result of the CBKE operation.
      EmberStatus status,
      // Return: The calculated value of the initiator's SMAC
      EmberSmacData *initiatorSmac,
      // Return: The calculated value of the responder's SMAC
      EmberSmacData *responderSmac)
{
(void)status;
(void)initiatorSmac;
(void)responderSmac;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "calculate_smacs_handler283k1" -%}
{{ cb['function_name'] }}(status, initiatorSmac, responderSmac);
{% endif -%}
{% endfor -%}
}


{# GPEP_INCOMING_MESSAGE #}
// Gpep Incoming Message
void sli_zigbee_af_gpep_incoming_message(
      // The status of the GPDF receive.
      EmberStatus status,
      // The gpdLink value of the received GPDF.
      uint8_t gpdLink,
      // The GPDF sequence number.
      uint8_t sequenceNumber,
      // The address of the source GPD.
      EmberGpAddress *addr,
      // The security level of the received GPDF.
      EmberGpSecurityLevel gpdfSecurityLevel,
      // The securityKeyType used to decrypt/authenticate the incoming GPDF.
      EmberGpKeyType gpdfSecurityKeyType,
      // Whether the incoming GPDF had the auto-commissioning bit set.
      bool autoCommissioning,
      // Bidirectional information represented in bitfields, where bit0 holds
      // the rxAfterTx of incoming gpdf and bit1 holds if tx queue is available
      // for outgoing gpdf.
      uint8_t bidirectionalInfo,
      // The security frame counter of the incoming GDPF.
      uint32_t gpdSecurityFrameCounter,
      // The gpdCommandId of the incoming GPDF.
      uint8_t gpdCommandId,
      // The received MIC of the GPDF.
      uint32_t mic,
      // The proxy table index of the corresponding proxy table entry to the
      // incoming GPDF.
      uint8_t proxyTableIndex,
      // The length of the GPD command payload.
      uint8_t gpdCommandPayloadLength,
      // The GPD command payload.
      uint8_t *gpdCommandPayload)
{
(void)status;
(void)gpdLink;
(void)sequenceNumber;
(void)addr;
(void)gpdfSecurityLevel;
(void)gpdfSecurityKeyType;
(void)autoCommissioning;
(void)bidirectionalInfo;
(void)gpdSecurityFrameCounter;
(void)gpdCommandId;
(void)mic;
(void)proxyTableIndex;
(void)gpdCommandPayloadLength;
(void)gpdCommandPayload;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "gpep_incoming_message" -%}
{{ cb['function_name'] }}(status, gpdLink, sequenceNumber, addr, gpdfSecurityLevel, gpdfSecurityKeyType, autoCommissioning, bidirectionalInfo, gpdSecurityFrameCounter, gpdCommandId, mic, proxyTableIndex, gpdCommandPayloadLength, gpdCommandPayload);
{% endif -%}
{% endfor -%}
}


{# RTOS_IDLE #}
// Rtos Idle
// Return: True or False.
void sli_zigbee_af_rtos_idle(
      // Return: Idle time duration
      uint32_t *idleTimeMs)
{
(void)idleTimeMs;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "rtos_idle" -%}
{{ cb['function_name'] }}(idleTimeMs);
{% endif -%}
{% endfor -%}
}


{# RTOS_STACK_WAKEUP_ISR #}
// Rtos Stack Wakeup Isr
void sli_zb_af_rtos_stack_wakeup_isr(void)
{

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "rtos_stack_wakeup_isr" -%}
{{ cb['function_name'] }}();
{% endif -%}
{% endfor -%}
}


{# RADIO_NEEDS_CALIBRATING #}
// Radio Needs Calibrating
void sli_zigbee_af_radio_needs_calibrating(void)
{

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "radio_needs_calibrating" -%}
{{ cb['function_name'] }}();
{% endif -%}
{% endfor -%}
}


{# SCAN_ERROR #}
// Scan Error
void sli_zigbee_af_scan_error(
      // The error status of a scan
      EmberStatus status)
{
(void)status;

{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "scan_error" -%}
{{ cb['function_name'] }}(status);
{% endif -%}
{% endfor -%}
}

